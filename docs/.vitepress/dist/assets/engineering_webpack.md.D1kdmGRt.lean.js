import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.BFVHecrR.js";const o=JSON.parse('{"title":"1.source-map","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/webpack.md","filePath":"engineering/webpack.md"}'),p={name:"engineering/webpack.md"};function e(h,s,t,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_1-source-map" tabindex="-1">1.source-map <a class="header-anchor" href="#_1-source-map" aria-label="Permalink to &quot;1.source-map&quot;">​</a></h1><h2 id="_1-1-定义" tabindex="-1">1.1.定义 <a class="header-anchor" href="#_1-1-定义" aria-label="Permalink to &quot;1.1.定义&quot;">​</a></h2><ul><li>使用打包工具会将代码进行编译，然后跑在浏览器上 <ul><li>比如<code>ES6的代码</code>转成<code>ES5</code>的代码</li><li>比如对应的<code>代码行号、列号</code>在经过编译后肯定与之前不一样</li><li>比如代码<code>丑化压缩</code>时，会将<code>编码名称</code>等修改</li></ul></li><li><strong>但是，当代码报错，需要调试（debug），那么控制台中报错的文件名、行数是不对的</strong></li><li><strong>所以可以使用 source-map</strong><ul><li>source-map 会<code>将已经编译的文件中的代码</code>映射成<code>未编译前的代码</code></li><li>这样<code>可以使的浏览器重构原始代码</code>，所以即使在调试的时候也可以知道哪个文件的哪一行等信息报错</li></ul></li></ul><h2 id="_1-2-使用" tabindex="-1">1.2.使用 <a class="header-anchor" href="#_1-2-使用" aria-label="Permalink to &quot;1.2.使用&quot;">​</a></h2><ul><li><strong>第一步</strong>：根据源文件，生成 source-map 文件<code>(webpack在打包时，可以通过配置文件生成source-map)</code></li><li><strong>第二步</strong>：在转换后的代码，最后添加一个注释，它指向对于当前代码的 source-map 文件 <ul><li>eg: <code> //# sourceMappingURL=boundle.js.map</code></li></ul></li><li><strong>浏览器会根据我们的注释，查找相应的 source-map，并且根据 source-map 还原打包前的代码，方便调试</strong></li></ul><p><strong>上面两步 只需要配置 devtool 就行</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个注释必须紧挨着配置对象 这些才有代码提示</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {import(&#39;webpack&#39;).Configuration}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devtool: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;source-map&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成source-map文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_1-3-devtool-的值" tabindex="-1">1.3.devtool 的值 <a class="header-anchor" href="#_1-3-devtool-的值" aria-label="Permalink to &quot;1.3.devtool 的值&quot;">​</a></h2><ul><li>webpack 为我们提供了非常多的选项(目前有 26 个)，来处理 source-map</li><li><code>值不同</code>，生成的 source-map 会<code>稍微有差异</code>，打包的过程也会有<code>性能的差异</code>，可以根据不同情况进行选择</li><li>有些值可以用在 production，有些则不能，看一下链接文档的说明</li><li><a href="https://www.webpackjs.com/configuration/devtool/#root" target="_blank" rel="noreferrer">https://www.webpackjs.com/configuration/devtool/#root</a></li></ul><p><strong>下面几个值是不会生成 source-map 文件的</strong></p><ul><li><strong>false</strong>：不使用 source-map，也就是没有任何 source-map 相关的内容</li><li><strong>none</strong>：<code>mode：production</code>时候的默认值，不生成 source-map （<code>不能主动设置否则会报错</code>，当 production 时自动设置）</li><li><strong>eval</strong>：<code>mode:development</code>时的默认值，不生成 source-map <ul><li>但是它会在 eval 执行的代码中添加 //# sourceURL= xxx</li><li>然后就会被浏览器在执行的时候解析，并且在调试面板中生成对应的文件目录，方便我们调试代码</li><li>虽然可以知道是哪个文件，但是<code>在哪行</code>，<code>有时候是不准确的</code></li></ul></li></ul><p><strong>devtool : source-map</strong></p><ul><li>会生成完整的 source-map，但是打包或者运行代码时相比于上面的速度会很慢</li></ul><h1 id="_2-babel" tabindex="-1">2.Babel <a class="header-anchor" href="#_2-babel" aria-label="Permalink to &quot;2.Babel&quot;">​</a></h1><h2 id="_2-1-定义" tabindex="-1">2.1.定义 <a class="header-anchor" href="#_2-1-定义" aria-label="Permalink to &quot;2.1.定义&quot;">​</a></h2><ul><li>Babel 是一个工具链，主要用于旧浏览器或者环境中将 ES6+的代码转换为向后兼容的 javascript</li><li>包括：语法转换、源代码转换、Polyfill 实现目标环境缺少的功能等</li></ul><h2 id="_2-2-单独使用-babel" tabindex="-1">2.2.单独使用 Babel <a class="header-anchor" href="#_2-2-单独使用-babel" aria-label="Permalink to &quot;2.2.单独使用 Babel&quot;">​</a></h2><ul><li><p><strong>Babel 可以作为一个单独的工具来使用</strong>，可以不和 webpack 等构建工具配合来使用</p></li><li><p>如果想要在命令行单独使用，需要安装以下的库</p><ul><li><p><code>@babel/core</code> : babel 的核心代码，必须安装</p></li><li><p><code>@babel/cli</code>：可以让我们在命令行中使用 Babel</p></li><li><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm i @babel/core @babel/cli -D</span></span></code></pre></div></li></ul></li></ul><p><strong>使用 babel 来处理源代码</strong></p><ul><li><code>--out-dir</code> : 指定要输出的文件夹 dist</li><li><code>--plugins=xxx,xxx</code>：要使用的插件，多个插件之间用逗号隔开</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx babel ./src --out-dir ./dist --plugins=@babel/plugin-transform-block-scoping</span></span>
<span class="line"><span></span></span>
<span class="line"><span>使用babel来转换src文件夹下的所有代码，将转换完后的代码输出到dist目录下，转化的时候使用的是xxx插件</span></span>
<span class="line"><span>注意：使用的插件是需要自行安装的</span></span></code></pre></div><h2 id="_2-3-babel-的预设插件" tabindex="-1">2.3.babel 的预设插件 <a class="header-anchor" href="#_2-3-babel-的预设插件" aria-label="Permalink to &quot;2.3.babel 的预设插件&quot;">​</a></h2><ul><li>上面的示例中可以看到，每转换一种语法(es6-&gt;es5)都要安装一个插件 <ul><li>比如：转化 const、let 需要安装@babel/plugin-transform-block-scoping</li><li>转化 尖头函数需要安装@babel/plugin-transform-arrow-functions</li><li>等等</li></ul></li><li>这样如果要转换的语法多了，那么命令行中需要写很多个插件，太繁琐了</li><li></li><li><strong>所以 Babel 提供了 Babel preset（babel 预设）</strong></li><li><code>npm i @babel/preset-env -D</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx babel ./src --out-dir ./dist --presets=@babel/preset-env</span></span></code></pre></div><h2 id="_2-4-babel-的底层原理" tabindex="-1">2.4.babel 的底层原理 <a class="header-anchor" href="#_2-4-babel-的底层原理" aria-label="Permalink to &quot;2.4.babel 的底层原理&quot;">​</a></h2><ul><li>其实 Babel 就可以看做一个编译器</li><li>Babel 也拥有编译器的工作流程 <ul><li>解析阶段(parsing)</li><li>转换阶段(transformation)</li><li>生成阶段(code generation)</li></ul></li></ul><h2 id="_2-5-babel-loader" tabindex="-1">2.5.babel-loader <a class="header-anchor" href="#_2-5-babel-loader" aria-label="Permalink to &quot;2.5.babel-loader&quot;">​</a></h2><ul><li>实际开发中，我们通常会在构建工具中通过配置 babel 来对其进行使用，比如在 webpack 中</li><li>那么就需要安装相关的依赖了<code>(安装babel-loader的时候会自动安装@babel/core)</code><ul><li><code>npm i babel-loader @babel/core</code></li></ul></li></ul><p><strong>配置 babel</strong></p><ul><li>上面案例中我们知道，<code>默认使用Babel是不会转换es6-&gt;es5代码的</code></li><li>需要在执行命令的时候告诉 Babel 使用什么 plugin 来转换，webpack 中也是一样</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          options: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 默认情况下 使用babel-loader 不会转换es6的代码，需要配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // plugins: [&#39;@babel/plugin-transform-arrow-functions&#39;],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            presets: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-6-常见的-babel-preset" tabindex="-1">2.6.常见的 babel-preset <a class="header-anchor" href="#_2-6-常见的-babel-preset" aria-label="Permalink to &quot;2.6.常见的 babel-preset&quot;">​</a></h2><ul><li>如果我们一个个去安装使用插件，那么需要手动来管理大量的 babel 插件，所以可以直接<code>给webpack提供一个preset</code>，webpack 会<code>根据提供的preset</code>来<code>加载</code>对应的<code>插件列表</code>，并将其传递给 babel</li></ul><p><strong>常见的 preset 有三个</strong></p><ul><li><strong>env</strong></li><li><strong>react</strong></li><li><strong>TypeScript</strong></li></ul><p><strong>安装 env</strong></p><ul><li><code>npm i @babel/preset-env</code></li></ul><h2 id="_2-7-浏览器兼容" tabindex="-1">2.7.浏览器兼容 <a class="header-anchor" href="#_2-7-浏览器兼容" aria-label="Permalink to &quot;2.7.浏览器兼容&quot;">​</a></h2><ul><li><p>开发中如果处理浏览器的兼容问题呢？</p><ul><li><p>这里说的浏览器兼容<code>不是指屏幕大小的变化适配</code></p></li><li><p>这里指的兼容性是<code>针对不同的浏览器支持的特性</code>，比如 css 特性，js 语法特性直接的兼容</p></li><li><p><a href="https://caniuse.com/usage-table" target="_blank" rel="noreferrer">https://caniuse.com/usage-table</a> 可以通过这个网站查看浏览器的市场占有</p></li></ul></li><li><p>可以通过<code>broswerslist</code>工具来处理兼容性的问题</p></li></ul><h3 id="_2-7-1-broswerslist" tabindex="-1">2.7.1.<strong>broswerslist</strong> <a class="header-anchor" href="#_2-7-1-broswerslist" aria-label="Permalink to &quot;2.7.1.**broswerslist**&quot;">​</a></h3><ul><li>broswerslist 是一个在<code>不同的前端工具之间</code>，<code>共享目标浏览器和Nodejs版本的配置</code></li><li>broswerslist 会查询上面的网站，然后<code>共享给不同的插件告诉它们要适配哪些浏览器</code></li><li>下面的插件都会使用 broswerslist 来查询 <ul><li>Autoprefixer</li><li>Babel</li><li>postcss-preset-env</li><li>eslint-plugin-compat</li><li>...</li></ul></li></ul><p>**举例子：**比如我们上面说到 babel preset-env 会根据环境来给我们自动选择需要哪些插件来解析代码，其实他的环境来源就是 browserslist</p><h3 id="_2-7-2-broswerslist-编写规则" tabindex="-1">2.7.2.broswerslist 编写规则 <a class="header-anchor" href="#_2-7-2-broswerslist-编写规则" aria-label="Permalink to &quot;2.7.2.broswerslist 编写规则&quot;">​</a></h3><p><strong>下面数字都可以替换的</strong></p><ul><li><p><strong>defaults</strong>：broswerslist 的默认浏览器（&gt;0.5%, last 2 versions, Firefox ESR, not dead）</p><ul><li>这是 browserslist 的默认配置，可以在配置文件中写 defaults，也可以不写配置文件 都有一样的效果</li><li><code>表示市场占有率&gt;0.5%,最后两个版本，没有淘汰的都要兼容</code></li></ul></li><li><p><strong>5%</strong>：场占有率是 5%，也可使用&gt;=、&gt;、&lt;、&lt;=</p></li><li><p><strong>dead</strong>:24 个月内没有官方支持或者更新的浏览器，都表示 dead 了</p></li><li><p><strong>last 2 versions:</strong> 每个浏览器的最后 2 个版本</p><ul><li>last 2 Chrome version: 最后两个版本的 chrome 浏览器</li></ul></li><li><p><strong>ios 7</strong> ：直接指定浏览器的版本</p></li><li><p>...</p></li></ul><h3 id="_2-7-3-使用-browserslist" tabindex="-1">2.7.3.使用 browserslist <a class="header-anchor" href="#_2-7-3-使用-browserslist" aria-label="Permalink to &quot;2.7.3.使用 browserslist&quot;">​</a></h3><ul><li>安装 babel 的时候会自动下载 browserslist</li><li><code>npm i browserslist</code></li></ul><p><strong>命令行使用</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> npx browserslist &quot;&gt;50%,last 5 versions, not dead&quot;</span></span></code></pre></div><p><strong>配置文件中使用(开发中使用)</strong></p><ul><li>常见的配置文件有<code>两种</code></li><li><strong>package.json 文件</strong></li><li><strong>.browserslistrc 文件</strong></li></ul><p>package.json</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;01-source-mp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  ...,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;browserslist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&gt; 0.1%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;last 2 version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;not dead&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>.browserslistrc 文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt; 5%</span></span>
<span class="line"><span>not dead</span></span>
<span class="line"><span>last 2 versions</span></span></code></pre></div><p><strong>注意</strong></p><p>上面的每个规则<code>用逗号</code>隔开或者<code>换行写</code>都表示<code>or</code>的意思</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt; 5%</span></span>
<span class="line"><span>not dead</span></span>
<span class="line"><span>last 2 versions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>等价于or（或）</span></span>
<span class="line"><span>&gt; 5% or not dead or last 2 versions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>还可以使用and（且）</span></span>
<span class="line"><span>&gt; 5% and last 2 versions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>还可以使用 not （非）</span></span>
<span class="line"><span>&gt; 5%  not last 2 versions</span></span></code></pre></div><h2 id="_2-8-babel-的配置文件" tabindex="-1">2.8.Babel 的配置文件 <a class="header-anchor" href="#_2-8-babel-的配置文件" aria-label="Permalink to &quot;2.8.Babel 的配置文件&quot;">​</a></h2><ul><li>上面配置 babel 都是在<code>webpack.config.js</code>中的，那么如果<code>babel的配置一多</code>，会导致 webpack.config.js 文件<code>难以维护</code></li><li><strong>所以可以将 babel 的配置单独放在一个配置文件中</strong></li><li>配置文件名有两种方式 <ul><li><strong>babel.config.json</strong>(推荐这种写法) <ul><li>或者以.js、.cjs、.mjs 结尾</li><li><code>eg: babel.config.js</code></li></ul></li><li><strong>.babelrc.json</strong>(早期的写法) <ul><li>或者是.babelrc、.js、.mjs</li><li><code>eg:.babelrc</code></li></ul></li></ul></li><li><strong>运行时 webpack 会自动读取 babel.config.js 文件然后将配置项给到 babel-loader</strong></li></ul><p><strong>babel.config.js</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 默认情况下 使用babel-loader 不会转换es6的代码，需要配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // plugins: [&#39;@babel/plugin-transform-arrow-functions&#39;],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  presets: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>webpack.config.js</strong></p><ul><li><strong>运行时 webpack 会自动读取 babel.config.js 文件然后将配置项给到 babel-loader</strong></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {import(&#39;webpack&#39;).Configuration}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-9-pollyfill" tabindex="-1">2.9.pollyfill <a class="header-anchor" href="#_2-9-pollyfill" aria-label="Permalink to &quot;2.9.pollyfill&quot;">​</a></h2><h3 id="_2-9-1-定义" tabindex="-1">2.9.1.定义 <a class="header-anchor" href="#_2-9-1-定义" aria-label="Permalink to &quot;2.9.1.定义&quot;">​</a></h3><ul><li>可以将 pollyfill 理解为<code>填充物（垫片）</code>，一个<code>补丁</code>，可以帮助我们更好的使用 JavaScript</li><li>在高级代码转换低级原代码的时候，对于低版本 js 没有的 api，pollyfill 会将其添加进来</li><li><strong>举个栗子</strong><ul><li>当我们写一个 es6 的语法 new promise 和 string.includes()的时候要将其转为 es5 的语法</li><li>用 babel 转换的时候，是<code>不会转换的</code> 因为 new 本来就是一个普通的语法，string.includes()本来就是一个普通的方法调用，babel 转换的时候<code>只会将高级语法转为低级语法</code>(const、let -&gt; var)，然后跑在低版本的浏览器上就会报错</li><li>这时候<code>可以利用pollyfill给js打一个补丁</code>，它会给 js 添加<code>(填充)</code>一个 function Promise ，添加<code>(填充)</code>一个 string.prototype.includes 方法</li><li>那么在低版本的浏览器上调用 new promise 或 string.includes 的时候其实就是调用 pollyfill 提供的方法</li></ul></li></ul><h3 id="_2-9-2-使用" tabindex="-1">2.9.2.使用 <a class="header-anchor" href="#_2-9-2-使用" aria-label="Permalink to &quot;2.9.2.使用&quot;">​</a></h3><p><strong>安装</strong></p><ul><li><strong>babel7.4.0</strong>之后的安装方式都是以下两个包</li><li><code>npm i core-js regenerator-runtime</code></li></ul><p><strong>配置</strong></p><ul><li><p>在 babel 的配置中(独立文件或 webpack)</p></li><li><p>案例中演示的是<code>独立文件</code></p></li><li><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 说明为啥presets中既可以写string又可以写array</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写array是为了，给当前的preset设置更多的配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前面说到babel里面有很多的preset</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  presets: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        corejs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// corejs的版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useBuiltIns: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;usage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li></li></ul><p><strong>配置属性和值的含义</strong></p><p><strong>corejs</strong></p><ul><li>表示 core-js 的版本 ，每个版本的打包方式是有区别的</li></ul><p><strong>useBuiltIns</strong>：打包的时候如果使用 polyfill</p><ul><li><code>false</code><ul><li>打包的文件不使用 polyfill 来进行适配</li><li>并且这个时候是不需要设置 corejs 属性的</li></ul></li><li><code>usage</code><ul><li>会根据代码中出现的语言特性，自动检测所需要的 polyfill <ul><li>比如转换的代码有 new Promise 那么就会引入对于的 polyfill</li></ul></li><li>这样可以确保最终包里的 polyfill 数量的最小化，打包的包相对会小一些</li><li>可以设置 coresjs 属性来确定使用的 corejs 的版本</li></ul></li><li><code>entry</code><ul><li>如果我们使用了 dayjs 三方库，那么 dayjs 中也使用了新的特性，比如使用了 includes 方法</li><li>但是因为我们使用的是 usage，所以打包的时候是不会对 dayjs 进行 polyfill 操作的</li><li>那么跑在低版本浏览器就会报错</li><li>这时候可以使用 entry</li><li>但是需要在<code>入口文件(比如vue中在main.js)</code>引入<code>import &#39;core-js/stable&#39;;import &#39;regenerator-runtime/runtime&#39;</code></li><li>会根据<code>browserslist</code>查询到要适配的浏览器，然后将这些浏览器需要的 polyfill 打包，但是这也会导致包会比较大</li></ul></li></ul><h2 id="_2-10-解析-typescript" tabindex="-1">2.10.解析 TypeScript <a class="header-anchor" href="#_2-10-解析-typescript" aria-label="Permalink to &quot;2.10.解析 TypeScript&quot;">​</a></h2><h3 id="_2-10-1-使用-ts-loader-解析" tabindex="-1">2.10.1 使用 ts-loader 解析 <a class="header-anchor" href="#_2-10-1-使用-ts-loader-解析" aria-label="Permalink to &quot;2.10.1 使用 ts-loader 解析&quot;">​</a></h3><ul><li><p>如果希望在 webpack 中使用 TypeScript，可以使用 ts-loader 来处理 ts 文件</p><ul><li>​ <code>npm i ts-loader</code></li></ul></li><li><p>配置 ts-loader</p></li><li><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        exclude:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/node_modules&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ts-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li></li></ul><h3 id="_2-10-2-使用-babel-loader-解析" tabindex="-1">2.10.2 使用 babel-loader 解析 <a class="header-anchor" href="#_2-10-2-使用-babel-loader-解析" aria-label="Permalink to &quot;2.10.2 使用 babel-loader 解析&quot;">​</a></h3><ul><li><strong>开发中建议使用这个</strong></li><li>因为 ts-loader 使用的是 typescript- compiler，它里面是没有 polyfill 的</li><li>如果 ts 代码中使用比较新的特性，那么使用 ts-loader 打包的时候，这些新特性是不会转换的，最终在低版本的浏览器上是跑不起来的</li><li>如果使用 babel-laoder 的时候可以给 ts 添加 polyfill</li></ul><p><strong>使用</strong></p><ul><li>可以使用插件：@babel/tranform-typescript</li><li><code>更推荐使用预设：@babel/preset-typescript</code></li></ul><p><strong>安装</strong></p><ul><li><code>npm i @babel/preset-typescript -D</code></li></ul><p><strong>示例</strong></p><p>babel.config.js 文件</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  presets: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        corejs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// corejs的版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useBuiltIns: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;usage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 给typescript设置polyfill</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;@babel/preset-typescript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        corejs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// corejs的版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useBuiltIns: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;usage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_2-10-3-ts-loader-和-babel-loader-的选择" tabindex="-1">2.10.3.ts-loader 和 babel-loader 的选择 <a class="header-anchor" href="#_2-10-3-ts-loader-和-babel-loader-的选择" aria-label="Permalink to &quot;2.10.3.ts-loader 和 babel-loader 的选择&quot;">​</a></h3><p><strong>区别</strong></p><ul><li><code>ts-loader</code><ul><li>直接来编译 TypeScript，那么只能将 ts 转为 js，且<code>会对类型进行检测</code></li><li><code>无法实现polyfill</code></li></ul></li><li>babel-loader <ul><li>直接来编译 TypeScript，可以将 ts 转为 js，并且<code>可以实现polyfill的功能</code></li><li>但是在编译的过程中<code>不会对类型错误进行检测</code></li></ul></li></ul><p><strong>选择</strong></p><ul><li><p>真是开发中如果编写的 ts 代码<code>不需要兼容低版</code>本的浏览器(且浏览器可以使用新特性)，那么使用 ts-loader 即可</p></li><li><p>如果<code>希望兼容低版本浏览器</code>，那么可以 babel-loader 和 ts-loader<code>结合使用</code></p><ul><li>在打包之前<code>先使用</code>ts-loader 来进行类型检测 <code>yarn ts-check</code></li><li><code>最后用</code>babel-loader 来完成打包 <code>yarn ts-check-watch</code></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要在脚本中添加一下两个命令来完成类型检测</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --noEmit 表示不输出文件 只检测类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --watch 表示实时监测文件的类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ts-check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tsc --noEmit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ts-check-watch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tsc --noEmit --watch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h1 id="_3-dev-server" tabindex="-1">3.dev-server <a class="header-anchor" href="#_3-dev-server" aria-label="Permalink to &quot;3.dev-server&quot;">​</a></h1><h2 id="_3-1-webpack-dev-server" tabindex="-1">3.1.webpack-dev-server <a class="header-anchor" href="#_3-1-webpack-dev-server" aria-label="Permalink to &quot;3.1.webpack-dev-server&quot;">​</a></h2><ul><li>启动一个本地服务</li><li><code>npm i webpack-dev-server -D</code></li><li>webpack-dev-server 在编之后不会写入到任何的输出文件，而是<code>将打包的文件保留在内存中</code><ul><li>所以他的效率很高的</li><li>事实上，webpack-dev-server 使用了一个库叫 memfs</li></ul></li><li><code>当启动服务</code>，会将当前入口文件的内容进行打包然后将其<code>放在内存中</code>,我们访问的时候就是访问这一块内存里的文件</li></ul><h3 id="_3-1-webpack-dev-server-配置项" tabindex="-1">3.1.webpack-dev-server 配置项 <a class="header-anchor" href="#_3-1-webpack-dev-server-配置项" aria-label="Permalink to &quot;3.1.webpack-dev-server 配置项&quot;">​</a></h3><ul><li>所有的配置项都在<code>devServer</code>对象中配置</li></ul><h4 id="static" tabindex="-1">static <a class="header-anchor" href="#static" aria-label="Permalink to &quot;static&quot;">​</a></h4><ul><li><p>devServer.static 对于我们直接访问打包后的资源其实并没有太大的作用，他主要的作用是用于我们打包后的资源又依赖其他的一下资源，那么就需要指定从哪里来找这个内容</p></li><li><p><strong>举个例子</strong></p><ul><li>上面说到，webpack-dev-server 打包的内容会放到内存中</li><li>打包的文件中的 html 文件中会引入打包后的 js 文件&lt;script src=&quot;./boundle.js&quot;&gt;</li><li>但是我们在这个 html 文件中还引入了别的 js(引入的可以是任何文件)文件，比如引入了 content 文件夹的 abc.js</li><li>这个文件是没有被打包的，因为入口文件没有配置这个</li><li>那么当在浏览器中运行代码就会报错，内容是找不到这个文件</li></ul></li><li><p>这时候就可以<code>配置static</code>来解决</p></li><li><p><strong>注意</strong>：在 index.html 文件中引入时候直接写文件名，不要写文件夹的名字，因为在 static 中已经配置了</p><ul><li>&lt;script src=&quot;./abc.js&quot;&gt;<code> 正确写法</code></li><li>&lt;script src=&quot;./content/abc.js&quot;&gt; <code>错误写法</code></li></ul></li><li><p>webpack 会自动的找到当前文件夹进行匹配</p></li><li><p>static 的默认值是<code>static:[&#39;public&#39;]</code></p><ul><li>也就是说如果是引入 public 文件夹中的静态资源是不需要配置的</li></ul></li><li><p>但是<code>如果手动的配置了</code>static,那么<code>默认值就会失效</code></p></li><li><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果有同名的文件在不同的文件夹 在前面的文件夹会匹配 后面的不会匹配</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    static: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h4 id="host" tabindex="-1">host <a class="header-anchor" href="#host" aria-label="Permalink to &quot;host&quot;">​</a></h4><ul><li>设置主机地址</li><li>默认是<code>localhost</code></li><li>如果希望同一个局域网下的其他设备也可以访问，可以设置<code>host:0.0.0.0</code><ul><li>但是测试发现 不配置别的设备也可以访问</li></ul></li></ul><p><strong>localhost 和 0.0.0.0 区别</strong></p><ul><li>localhost 本质上是一个域名，通常情况下会被解析成 127.0.0.1</li><li>127.0.0.1 是一个回环地址(Loop Back Address)，变大的意思是我们主机自己放出去的包，直接被自己接收 <ul><li>正常的数据的流程是 应用层-&gt;传输层-&gt;网络层-&gt;数据链路层-&gt;物理层</li><li>而回环地址，在网络层就直接被截获了，不会经过数据链路层、物理层</li></ul></li><li>0.0.0.0：监听 IPV4 上的所有地址，再根据端口找到不同的应用程序 <ul><li>同一网段下的主机中，可以通过 ip 访问</li></ul></li></ul><h4 id="open" tabindex="-1">open <a class="header-anchor" href="#open" aria-label="Permalink to &quot;open&quot;">​</a></h4><ul><li>编译成功后，是否自动打开浏览器</li><li>默认值：<code> false</code></li></ul><h4 id="compress" tabindex="-1">compress <a class="header-anchor" href="#compress" aria-label="Permalink to &quot;compress&quot;">​</a></h4><ul><li>是否为打包后的代码压缩</li><li>默认值是<code>true</code></li></ul><h4 id="proxy" tabindex="-1">proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;proxy&quot;">​</a></h4><ul><li>代理 解决跨域问题</li><li>可以参考之前写的 nodejs 代理解决跨域，原理都是一样的(因为他们用的都是<code>http-proxy-middleware</code>中间件)</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    static: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;public&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://124.221.241.135:8888/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pathRewrite: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;^/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="historyapifallback" tabindex="-1">historyApiFallback <a class="header-anchor" href="#historyapifallback" aria-label="Permalink to &quot;historyApiFallback&quot;">​</a></h4><ul><li>主要作用是解决 spa 页面在路由跳转之后，进行页面刷新，返回 404 的错误</li><li>默认是 false</li><li><strong>举个例子</strong><ul><li>我们在使用 vue/react 搭建项目的时候，如果选择了 history 路由模式，那么浏览器 url 是这样的<a href="http://abc.com/about" target="_blank" rel="noreferrer">http://abc.com/about</a></li><li>这时候我们处于的是 about 这个模块，我们通过 js 来进行跳转是没问题的</li><li>但是千万不能刷新页面，一刷新就会报错 404</li><li>**原因：**因为我们使用的是 history 模式，当我们刷新的时候浏览器会默认打开<a href="http://www.abc.xn--comaboutindex-w40up74ce3e9smlq9eio3cga7827k.xn--html-t85f980j" target="_blank" rel="noreferrer">http://www.abc.com这台服务器的about下的index.html文件</a>，但是我是没有这个文件的，所以就会报错404</li><li>**解决：**将<code>historyApiFallback:true</code>即可</li><li>之后我们刷新网页 浏览器会将/about 当作是 history 的一部分来解析</li></ul></li></ul><h1 id="_4-webpack-性能优化" tabindex="-1">4.webpack 性能优化 <a class="header-anchor" href="#_4-webpack-性能优化" aria-label="Permalink to &quot;4.webpack 性能优化&quot;">​</a></h1><ul><li>webpack 的性能优化比较多，可以对其进行分类 <ul><li><strong>优化一</strong>：<code>打包后的结果</code>，上线时的性能优化（比如：分包处理、减少包体积、CDN 服务器等）</li><li><strong>优化二</strong>：<code>优化打包速度</code>，开发或者构建时优化打包速度（比如 exclude、cache-loader 等）</li></ul></li><li>大多数情况下，更加<code>侧重于优化一</code>，这对一线上的产品影响更大</li><li>大多数情况下 webpack 都帮我们做好了该有的性能优化 <ul><li>比如配置 mode 为 production 或者 development 时，默认 webpack 都有做相关配置</li><li>但是我们也可以针对性的优化自己的项目</li></ul></li></ul><h2 id="_4-1-代码分离-code-splitting" tabindex="-1">4.1.代码分离(Code Splitting) <a class="header-anchor" href="#_4-1-代码分离-code-splitting" aria-label="Permalink to &quot;4.1.代码分离(Code Splitting)&quot;">​</a></h2><ul><li>代码分离是 webpack 一个非常重要的特性,<strong>这在性能优化中非常重要*</strong>（简称分包） <ul><li>它主要的目的就是<code>将不同的代码分离到不同的bundle(包)中(</code>就是打包的时候将不同的代码打包到单独的文件)，自后我们可以<code>按需加载</code>，或者<code>并行加载这些文件</code>(下载文件的时候不是单线程的下载而是多线程的下载)</li><li>比如默认情况下，<code>所有的js代码</code>(业务代码、三方依赖、暂时没有用到的模块)<code>在加载首页的时候会全部加载</code></li><li>代码分离可以分<code>离出更小的bundle</code>，以及<code>控制资源加载的优先级</code>，提高代码加载的性能</li><li>分包还<code>有利于浏览器的缓存策略</code><ul><li>案例在下面的笔记中</li></ul></li></ul></li><li><strong>webpack 中常用的代码分离有三种</strong><ul><li><code>入口起点</code>：使用 entry 配置手动分离代码(<code>多入口</code>)</li><li><code>防止重复</code>：使用 Entry Dependencies 或者 SplitChunksPlugin 去重和分离代码</li><li><code>动态导入</code>：通过模块的内敛函数调用来分离代码</li></ul></li></ul><h3 id="_4-1-1-入口起点" tabindex="-1">4.1.1.入口起点 <a class="header-anchor" href="#_4-1-1-入口起点" aria-label="Permalink to &quot;4.1.1.入口起点&quot;">​</a></h3><ul><li>其实就是让 webpack 在打包的时候<code>对多入口文件或者依赖单独打包</code></li><li>比如有两个入口 index.js 和 main.js 他们有不同的逻辑，打包的时候要将他们分开，就可以使用多入口</li><li>比如只有一个入口，但是不想让三方包(dayjs)也打包在当前代码中</li></ul><p><strong>手动配置</strong></p><p>webpack.config.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用多入口 key是可以自定义的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    main: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/main.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    index: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 因为使用的是多入口，那么打包的时候是webpack不知道讲那个文件代码放到bundle.js中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这时候可以使用占位符，会自动获取入口的那么然后命名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name]-bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;build&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clean: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>上述代码中会存在问题</strong></p><ul><li>问题一：两个入口如果引用了相同的包，比如都用了 dayjs，那么<code>每个入口文件的包都会打包一份</code>dayjs(<code>主要问题</code>)</li><li>问题二：所有的依赖都是和入口文件放在一起，难以阅读</li></ul><p><strong>解决</strong></p><ul><li><p><code>将依赖单独打包</code>,然后每个入口引用即可</p></li><li><p><code>让入口的每个文件变成对象的形式</code>，这样可以添加很多配置项给每个入口文件</p><ul><li><code>import</code>: 启动时需加载的模块</li><li><code>dependOn</code>:当前入口所依赖的入口 <ul><li>比如：main.js 文件依赖了 axios 和 lodash,那么不可以直接在 dependOn 中写，要早 entry 中用一个变量(自定义名称)引用着他的依赖</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modules.exports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    main: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dependOn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;shared&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/main.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    index: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dependOn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;shared2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shared: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;axios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lodash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shared2: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dayjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;axios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devtool: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 因为使用的是多入口，那么打包的时候是webpack不知道讲那个文件代码放到bundle.js中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这时候可以使用占位符，会自动获取入口的那么然后命名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // entry的key都是name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name]-bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./build&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clean: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_4-1-2-动态导入-dynamic-import" tabindex="-1">4.1.2.动态导入(dynamic import) <a class="header-anchor" href="#_4-1-2-动态导入-dynamic-import" aria-label="Permalink to &quot;4.1.2.动态导入(dynamic import)&quot;">​</a></h3><ul><li>webpack 提供了两种实现动态导入的方式 <ul><li>第一种，使用 ECMAScript 中的<code>import()</code>语法来完成，目前<code>推荐的方式</code></li><li>第二种，使用 webpack 遗留的 require.ensure，不推荐</li></ul></li><li><strong>使用动态导入的包，打包的时候会单独打包出一个包</strong></li></ul><p><strong>案例</strong></p><ul><li>webpack 打包的时候发现用了 import()语法，那么就认为这是个动态导入，所以会单独打包(假设叫 a 包)</li><li>下面代码在浏览器运行的时候是不会下载 a 包的，只有点击 btn 的时候才会下载 a 包</li><li>这个就是 vue 中懒加载的原理</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> btn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;加载a文件&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(btn)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加魔法注释 在对分包命名的时候的name就是我们的魔法注释名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/*webpackChunkName:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">哈哈router</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*/./router/a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>分包命名</strong></p><ul><li>对分出独立的包进行命名</li><li><code>chunkFilename</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./build&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 针对分包的文件命名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这个name是可以更改的，在impot()的时候添加魔法注释即可</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunkFilename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name]-chunk.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clean: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_4-1-3-自定义分包" tabindex="-1">4.1.3.自定义分包 <a class="header-anchor" href="#_4-1-3-自定义分包" aria-label="Permalink to &quot;4.1.3.自定义分包&quot;">​</a></h3><ul><li><p>这种分包模式是<code>splitChunks</code>，它底层使用的是<code>SplitChunksPlugin</code>来实现的</p><ul><li>该插件 webpack 已经默认安装和集成，只需要<code>提供SplitChunksPlugin相关的配置信息</code>即可</li></ul></li><li><p>webpack 提供了 SplitChunksPlugin 默认的配置，我们也可以手动来修改他的配置</p><ul><li>比如默认配置中，chunks 仅仅对于异步（<code>async</code>）请求，我们也可以设置为<code>all</code><ul><li><code>import()</code>就属于异步,对于 import 语法的引入就会单独打包</li></ul></li><li>如果给设置了<code>all</code>，记得入口文件名字就不能写死，<code>要用占位符</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devtool: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name]-bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 优化配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunks: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ul><p><strong>splitChunks 部分属性</strong></p><p>地址：<a href="https://webpack.docschina.org/plugins/split-chunks-plugin/#splitchunkschunks" target="_blank" rel="noreferrer">https://webpack.docschina.org/plugins/split-chunks-plugin/#splitchunkschunks</a></p><ul><li><code>maxSize</code> （byte）</li><li>当一个包大于指定的大小时继续拆包,</li><li><code>minSize</code>（byte） <ul><li><code>默认值20000</code></li><li>拆的包最小不能小于 minSize 但是如果一个包是一个整体的话它大于了 maxSize 是拆不了的 如果这个包引用了其他依赖可以拆</li></ul></li><li><code>cacheGroups</code><ul><li>自定义分组，我们可以自定义匹配规则</li><li>注意要打包的文件最小是 minSize 的默认值哦，不然分包不了，当然也可以更改 minSize 默认值</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devtool: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name]-bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 优化配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunks: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // // 当一个包大于指定的大小时继续拆包</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // maxSize: 20000,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // // 拆的包最小不能小于minSize 但是如果一个包是一个整体的话它大于了maxSize 是拆不了的 如果这个包引用了其他依赖可以拆</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // minSize: 10000,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cacheGroups: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vendors: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[id]_vendors.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 把所有abc文件夹下的文件单独拆包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        abc: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">abc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[id]_abc.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_4-1-4-chunkids" tabindex="-1"><strong>4.1.4.chunkIds</strong> <a class="header-anchor" href="#_4-1-4-chunkids" aria-label="Permalink to &quot;**4.1.4.chunkIds**&quot;">​</a></h3><ul><li>用于告知 webpack 模块的 id 采用什么算法生成 <ul><li>使用占位符的时候<code>[id]</code> 这个属性就行修改 id 以什么算法生成</li></ul></li><li>常见的值有三个 <ul><li><strong>natural</strong>：按照数字的顺序生成 id</li><li><strong>named</strong>：<code>development下的默认值</code>，一个可读的名称 id，就是把用到的文件夹和文件名拼接</li><li><strong>deterministic</strong>：<code>production下的默认值</code>,确定性的，在不同的编译中不变的短数字 <ul><li>webpack4 中没有这个值的</li><li>如果使用<code>natural</code>，那么当我们修改过某个文件但是并没有修改改文件引入的三方包的时候，那么所有的文件都要重新打包一次，这是有点浪费性能的</li><li>如果我们讲文件部署到浏览器上了，这时候我们修改了某些东西然后重新上线，那么到我们打开改网站的时候，浏览器会下载用到的包，在下载之前浏览器会先检查本地缓存时候有同名文件内容一致的包，如果有就使用缓存，假想一下，如果第一次部署的三方包叫 1—xx.js 第二次由于修改了某些文件内容，然后重新打包了，名称换成了 2-x x.js 那么浏览器发现名称不一样了，所以又下载了一遍，这样浪费性能，而且影响页面加载时间</li><li>如果使用<code>deterministic</code>就不会出现这种情况，只要打包的包中如果没有内容修改就不会重新打包</li></ul></li></ul></li><li>最佳实践 <ul><li>开发过程中，推荐使用 named</li><li>打包过程中推荐使用 deterministic</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunkIds: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;named&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunks: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_4-1-5-解决注释的单独提取" tabindex="-1">4.1.5.解决注释的单独提取 <a class="header-anchor" href="#_4-1-5-解决注释的单独提取" aria-label="Permalink to &quot;4.1.5.解决注释的单独提取&quot;">​</a></h3><ul><li>默认情况下，webpack 在进行分包时，有对包中的注释单独提取到一个文件中</li><li>原因是由于一个插件的默认配置所导致的<code>TerserPlugin</code></li><li>TerserPlugin 插件是对 webpack 打包时 js 代码压缩一个插件</li><li><strong>webpack5 中以及默认集成了，无需下载</strong></li><li><code>在mode：production的情况下 extractComments默认值是true</code>,所以会提取一个注释文件</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 直接引入即可 无需下载webpack5已经默认集成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TerserPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;terser-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 优化配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minimize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 告知 webpack 使用 TerserPlugin 或其它在 optimization.minimizer定义的插件压缩 bundle。  development默认值是false production默认值是true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // minimizer:允许你通过提供一个或多个定制过的 TerserPlugin 实例，覆盖默认压缩工具(minimizer)。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minimizer: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerserPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extractComments: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//打包的时候不提取注释到单独文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_4-1-6-prefetch-和-preload" tabindex="-1">4.1.6.prefetch 和 preload <a class="header-anchor" href="#_4-1-6-prefetch-和-preload" aria-label="Permalink to &quot;4.1.6.prefetch 和 preload&quot;">​</a></h3><ul><li><strong>webpack v4.6.0+ 增加了对预获取和预加载的支持</strong></li><li>在使用<code>import()加载文件时</code>，使用下面这些内置指令，来告知浏览器 <ul><li><code>prefetch(预获取)</code>： <ul><li>比如我们进入一个网站，他有很多导航，那么默认使用 import()导入的导航文件只有当点击了某块导航的时候，浏览器才下载、加载文件，这是消耗时间的，虽然下载的时间可以小的忽略不计</li><li>这时候我们如果使用 prefetch，那么就会等浏览器空闲的时候去下载这些文件，而不是等到用户点击某个导航才进行下载（用户浏览某个导航内容是需要时间的，所以可以利用这个空闲时间）</li></ul></li><li><code>preload(预加载)</code><ul><li>如果我们浏览某个网页的某个导航页的内容，比如这个导航的页脚部分的代码没有和该导航的代码打包在一起，而是分包打开，但是我浏览当前的导航肯定是要加载页脚部分的不管用户看不看</li><li>那么就可以使用 preload，他会和当前导航文件<code>并行加载</code></li></ul></li></ul></li><li><strong>prefetch 指令和 preload 指令区别</strong><ul><li>父 chunk：比如主包是 index.js 里面引入了分包 b.js 那么 index.js 就是 b.js 的父 chunk</li><li>preload 会在父 chunk 加载时，以并行的方式开始加载，prefect 会在父 chunk 加载结束后开始加载</li><li>preload 具有中等优先级，会在父 chunk 下载的时候立马下载，prefetch 会在浏览器闲置的时候开始下载</li><li>preload 会在父 chun 中立即请求，用在当下时刻，prefetch 用于未来的某个时刻</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*webpackChunkName:&#39;a-router&#39;*/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*webpackPrefetch:true*/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./router/a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*webpackChunkName:&#39;b-router&#39;*/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*webpackPreload:true*/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./router/b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="_4-1-7-runtime-chunk" tabindex="-1">4.1.7.runtime chunk <a class="header-anchor" href="#_4-1-7-runtime-chunk" aria-label="Permalink to &quot;4.1.7.runtime chunk&quot;">​</a></h3><ul><li><p><strong>什么是 runtime 相关代码</strong></p><ul><li>runtime 相关的代码指的是在运行环境中，<code>对模块进行解析、加载、模块信息相关的代码</code></li><li>比如<code>我们有component、bar两个通过import函数相关的代码加载</code>，就是<code>通过runtime代码完成的</code></li></ul></li><li><p>所以在打包代码的时候<code>会将运行时代码和业务代码一起打包</code>,这样会导致包的体积变大，所以可以将 runtime chunk 单独抽离出来</p></li><li><p><strong>抽离出来后，有利于浏览器缓存的策略:</strong></p></li><li><p>比如我们修改了<code>业务代码(main)</code>，那么 runtime 和 component、bar 的 chunk<code>是不需要重新加载的</code></p></li><li><p>比如我们修改了<code>component、bar的代码</code>，那么 main 中的代码是<code>不需要重新加载的</code></p></li><li><p>设置的值:</p><ul><li><code>true/multiple</code>:针对每个入口打包一个 runtime 文件;</li><li><code>single</code>:打包一个 runtime 文件;</li><li><code>对象</code>:name 属性决定 runtimeChunk 的名称;</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 优化配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    runtimeChunk: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;runtime&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_4-2-cdn-加速" tabindex="-1">4.2.CDN 加速 <a class="header-anchor" href="#_4-2-cdn-加速" aria-label="Permalink to &quot;4.2.CDN 加速&quot;">​</a></h2><h3 id="_4-2-1-什么是-cdn" tabindex="-1">4.2.1.什么是 CDN <a class="header-anchor" href="#_4-2-1-什么是-cdn" aria-label="Permalink to &quot;4.2.1.什么是 CDN&quot;">​</a></h3><ul><li>CDN 全称 Content Delivery Network，即<code>内容分发网络</code>。</li><li>CND 加速<code>主要是加速静态资源</code>，如网站上面上传的图片、媒体，以及引入的一些 Js、css 等文件。</li><li>CND 加速需要依靠各个网络节点，例如 100 台 CDN 服务器分布在全国范围，从上海访问，会从最近的节点返回资源,提升资源下载速度，提高网站访问速度。</li></ul><h3 id="_4-2-2-开发中使用-cdn-方式" tabindex="-1">4.2.2.开发中使用 CDN 方式 <a class="header-anchor" href="#_4-2-2-开发中使用-cdn-方式" aria-label="Permalink to &quot;4.2.2.开发中使用 CDN 方式&quot;">​</a></h3><p><strong>CDN 服务器需要付费购买哦 看公司财力决定要不要使用 CDN 加速</strong></p><ul><li><strong>开发中，使用 CDN 主要有两种方式</strong><ul><li><code>方式一</code>：打包所有的静态资源，放到 CDN 服务器，用户访问所有资源都是通过 CDN 服务器加载的</li><li><code>方式二</code>：一些三方资源放到 CDN 服务器上(比如 axios、dayjs 的下载)</li></ul></li></ul><p><strong>方式一</strong></p><ul><li><p>如果使用方式一，那么可以直接修改过 publicPath</p></li><li><p>webpck 在打包的时候，会在 html 引入 script 的时候拼接上这个地址</p></li><li><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    publicPath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://abc.cba.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打包的html引入打包文件自动拼接地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://abc.cba.com/main-bundle.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><p><strong>方式二</strong></p><ul><li>通常一些<code>比较出名的开源框架</code>都会将打包后的源码放到一些<code>比较出名的、免费</code>的 CDN 服务器上 <ul><li>国际上使用较多的是 unpkg、JSDelivr、cdnjs</li><li>国内比较好用的是<code>bootcdn</code></li></ul></li><li><strong>使用</strong><ul><li>在项目中我们需要在配置文件中的<code>externals</code>属性配置哪些三方资源是需要 cdn 引入的</li><li>然后<code>在html模版中</code>将这些三方资源的 cdn 地址(<code>去查bootcdn上面查</code>)引入即可，注意是在 html 模版中引入，不是在打包后的 html 引入，那样每次打包都要引入</li></ul></li></ul><p><code>webpack.config.json</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  externals: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // key表示的意思：表示我们在自己项目中引入的三方包的名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // eg：import http from &#39;axios&#39;  那么axios就是本地引入的名字</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // value:表示从CDN地址请求下来的js中提供对应的名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //eg：cdn上lodash的全局变量叫 _  jquery的全局变量叫 $</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    axios: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;axios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lodash: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;_&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><code>模版index.html</code></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!--在这里引入--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.core.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_4-3-shimming-预支全局变量" tabindex="-1">4.3.shimming 预支全局变量 <a class="header-anchor" href="#_4-3-shimming-预支全局变量" aria-label="Permalink to &quot;4.3.shimming 预支全局变量&quot;">​</a></h2><ul><li>shimming<code>是一种思想</code></li><li><code>开发中尽量少用</code>，这和 webpack 的模块化的理念相悖,当发现出现下面的问题然后用 shimming 思想解决即可</li><li>这是为了防止一种情况</li><li>比如 我们使用了一个第三方库，abc 这个库，他里面用到了 dayjs 这个库，但是 abc 这个库没有引入 dayjs 这个库，他默认认为全局引入了 dayjs 这个库，那么这时候运行代码，代码就会报错（测试的时候不要用 cdn 引入，否则全局就会有 dayjs 这个变量了）</li><li>解决方法也很简单，就是在代码运行的时候在全局加一个 dayjs 的变量</li><li>可以使用<strong>ProvidePlugin</strong>来实现<strong>shimming</strong>的效果: <ul><li>ProvidePlugin 是 webpack 内置集成了的插件，无需下载，直接引入即可</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ProvidePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpack&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProvidePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      day: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dayjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示在全局引入了dayjs 类似 import day form &#39;dayjs&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_4-4-提取-css-到单独的文件" tabindex="-1">4.4.提取 css 到单独的文件 <a class="header-anchor" href="#_4-4-提取-css-到单独的文件" aria-label="Permalink to &quot;4.4.提取 css 到单独的文件&quot;">​</a></h2><ul><li>使用<code>MiniCssExtractPlugin</code>插件，可以将 css 单独提取到一个文件中</li><li><code>npm i mini-css-extract-plugin -D</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MiniCssExtractPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mini-css-extract-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {import(&#39;webpack&#39;).Configuration}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 开发中我们是用style-loader  他的作用是将编写的样式放在header的style中，便于我们调试</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // use: [&#39;style-loader&#39;, &#39;css-loader&#39;],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 生产环境中我们使用MiniCssExtractPlugin.loader  这个插件将css单独提取到一个文件中了，然后这个插件的loader将这个文件以&lt;link ref=...&gt;的方式引入到index.html中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [MiniCssExtractPlugin.loader, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 对css的提取  记得在rules中使用MiniCssExtractPlugin.loader代替style-loader</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MiniCssExtractPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css/[name]-css.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提取的文件的名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunkFilename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css/[name]-chunk.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动态导入的文件是单独分包的，那么如果有动态导入的css文件也会单独分包，这个就是设置分包的名字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_4-5-压缩-js-代码" tabindex="-1">4.5.压缩 js 代码 <a class="header-anchor" href="#_4-5-压缩-js-代码" aria-label="Permalink to &quot;4.5.压缩 js 代码&quot;">​</a></h2><h3 id="_4-5-1-terser-的介绍和安装" tabindex="-1">4.5.1.Terser 的介绍和安装 <a class="header-anchor" href="#_4-5-1-terser-的介绍和安装" aria-label="Permalink to &quot;4.5.1.Terser 的介绍和安装&quot;">​</a></h3><ul><li><strong>Terser 是一个用来压缩(compress)、丑化(Mangle)js 代码的工具集</strong><ul><li>当部署项目的时候肯定是希望包的体积越小越好这样在网络之间的传输速度会快</li><li>那么可以对代码压缩、丑化来减少体积，比如删除注释和空行，对与长变量名改为短的变量名(const message = &#39;123&#39; -&gt; const m = &#39;123&#39;)</li></ul></li><li>早期我们会使用 uglify-js 来压缩、丑化我们的 JavaScript 代码，但是目前已经不再维护，并且不支持 ES6+的语法;</li><li>Terser 是从 uglify-es fork 过来的，并且保留它原来的大部分 API 以及适配 uglify-es 和 uglify-js@3 等;</li></ul><p><strong>因为 Terser 是一个独立的工具，所以它可以单独安装:</strong></p><ul><li><code>npm i terser</code></li></ul><p><strong>命令行使用 Terser</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>terser [input files] [options]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>eg :</span></span>
<span class="line"><span>		terser js/index.js -o index.min.js -c xxx -m xxx</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	表示：使用terser执行js/index.js 输出文件是(-o) index.min.js. -c(压缩的配置项) -m(丑化的配置项)</span></span></code></pre></div><p><strong>部分配置项</strong></p><ul><li><a href="https://github.com/terser/terser#compress-options" target="_blank" rel="noreferrer">https://github.com/terser/terser#compress-options</a></li><li><a href="https://github.com/terser/terser#mangle-options" target="_blank" rel="noreferrer">https://github.com/terser/terser#mangle-options</a></li></ul><p><code>Compress option(压缩配置项)</code></p><ul><li><code>arrows</code>: class 中或者 object 中的函数，转为箭头函数</li><li><code>arguments</code>：将函数中使用 arguments[index]转为对应的形参名称</li><li><code>dead_code</code>： 默认值 true，移出不可达的代码（tree shaking） <ul><li>eg: if(false) clg(12332)</li></ul></li></ul><p><code>Mangle option</code></p><ul><li><code>toplevel</code>：默认值为 false，<code>顶层作用域</code>中的变量名称进行丑化</li><li><code>keep_classnames</code>: 默认值 false，丑化代码的时候，不丑化类名</li><li><code>keep_fnames</code>：默认值 false，丑化代码的时候，不丑化函数名</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>terser js/index.js -o index.min.js -c arrows=true,arguments=true  -m toplevel=true,keep_fnames=true</span></span></code></pre></div><h3 id="_4-5-2-terser-在-webpack-中的配置" tabindex="-1">4.5.2.Terser 在 webpack 中的配置 <a class="header-anchor" href="#_4-5-2-terser-在-webpack-中的配置" aria-label="Permalink to &quot;4.5.2.Terser 在 webpack 中的配置&quot;">​</a></h3><ul><li>真实开发中，不需要手动的通过 terser 来处理我们的代码，可以直接通过 webpack 来处理 <ul><li>webpack 中有一个 minimizer 属性，<code>在production</code>的模式下，<code>默认使用terserPlugin</code>插件来处理 js 代码</li></ul></li><li>如果不满意默认配置，可以进行手动配置 <ul><li>确保<code>minimize</code>(告知 webpack 打包的时候压缩代码)为<code>true</code>,production 模式下为默认为 true</li><li>然后在 minimizer 中创建一个 TerserPlugin(<code>webpack中已经集成的插件，无需下载</code>) <ul><li><code>extractComments</code>: 默认为 true，表示将注释单独抽取到一个文件中</li><li><code>parallel</code>：使用多进程并运行提高构建的速度，默认是 false</li><li><code>terserOptions</code>：设置 terser 相关的配置</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 直接引入即可 无需下载webpack5已经默认集成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TerserPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;terser-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 优化配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minimize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // minimizer存放压缩代码的插件 可以是js压缩的插件，也可使压缩css的插件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minimizer: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 压缩js的插件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerserPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extractComments: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不单独提取注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 默认情况下webpack已经对terser进行了配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果想要更改配置可以在terserOptions对象中自定义配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        terserOptions: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 压缩代码配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          compress: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            arguments: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 丑化代码配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 不能为对象，值为boolean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 在terserOptions对象中写mangle的配置即可</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          mangle: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          keep_fnames: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_4-6-压缩-css" tabindex="-1">4.6.压缩 CSS <a class="header-anchor" href="#_4-6-压缩-css" aria-label="Permalink to &quot;4.6.压缩 CSS&quot;">​</a></h3><ul><li><strong>使用的是<code>css-minimizer-webpack-plugin</code>来压缩 css 的</strong></li><li><code>npm i css-minimizer-webpack-plugin -D</code></li><li>css-minimizer-webpack-plugin 是使用<strong>cssnano</strong>工具来完成优化、压缩 css 的（这个工具也可以单独使用）</li><li><code>注意</code>：必须是将 css 单独抽<code>取到文件中</code>的才可以使用这个压缩，如果使用的是<code>style-loader</code>，会自动压缩</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CssMinimizerWebpackPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-minimizer-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minimize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // minimizer存放压缩代码的插件 可以是js压缩的插件，也可使压缩css的插件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minimizer: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 压缩css</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CssMinimizerWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_4-7-tree-shaking" tabindex="-1">4.7. Tree Shaking <a class="header-anchor" href="#_4-7-tree-shaking" aria-label="Permalink to &quot;4.7. Tree Shaking&quot;">​</a></h2><h3 id="_4-7-1-什么是-tree-shaking" tabindex="-1">4.7.1.什么是 Tree Shaking <a class="header-anchor" href="#_4-7-1-什么是-tree-shaking" aria-label="Permalink to &quot;4.7.1.什么是 Tree Shaking&quot;">​</a></h3><ul><li><p>什么是<strong>Tree Shaking 呢?</strong></p><ul><li>Tree Shaking 是一个术语，在计算机中表示<code>消除死代码</code>(dead_code);</li><li>最早的想法<code>起源于LIS</code>P，用于<code>消除未调用的代码</code>(纯函数无副作用，可以放心的消除，这也是为什么要求我们在进行函数式 编程时，尽量使用纯函数的原因之一);</li><li>后来 Tree Shaking 也被应用于其他的语言，比如 JavaScript、Dart;</li></ul></li><li><p>JavaScript<strong>的 Tree Shaking:</strong></p><ul><li>对 JavaScript 进行 Tree Shaking 是<code>源自打包工具rollup</code>;</li><li>这是因为 Tree Shaking 依赖于<code>ES Module的静态语法分析</code>(不执行任何的代码，可以明确知道模块的依赖关系);</li><li>webpack2 正式内置支持了 ES2015 模块，和检测未使用模块的能力;</li><li>在 webpack4 正式扩展了这个能力，并且通过<code> package.json的 sideEffects属性</code>作为标记，告知 webpack 在编译时，哪里文 件可以安全的删除掉;</li></ul></li></ul><h3 id="_4-7-2-webpack-实现-tree-shaking" tabindex="-1">4.7.2.webpack 实现 Tree Shaking <a class="header-anchor" href="#_4-7-2-webpack-实现-tree-shaking" aria-label="Permalink to &quot;4.7.2.webpack 实现 Tree Shaking&quot;">​</a></h3><ul><li>webpack 中实现 Tree shaking 采用了两种不同的方案 <ul><li><code>usedExports</code>: 通过标记某些函数是否被使用，之后通过 Terser 来进行优化</li><li><code>sideEffects</code>：跳过整个模块/文件，直接查看该文件是否有副作用</li></ul></li></ul><h3 id="_4-7-3-usedexports" tabindex="-1">4.7.3.usedExports <a class="header-anchor" href="#_4-7-3-usedexports" aria-label="Permalink to &quot;4.7.3.usedExports&quot;">​</a></h3><ul><li>开启方式很简单：只需要在<code>optimization</code>将<code>usedExports</code>设置为<code>true</code>即可</li><li>当<code>mode:production</code>的时候 webpack<code>默认将其开启</code></li></ul><p><strong>为了看到效果，要进行如下设置</strong></p><ul><li>将<code>mode:&#39;development&#39;</code>，并将<code>devtool:false</code>方便我们观察</li></ul><p><strong>案例场景</strong></p><ul><li>我们在入口文件 main.js 中定义了一个函数 foo，但是并没有使用这个 foo</li><li>同时在入口中引入了 math.js 文件，这个文件中导出了 sum 函数和 sub 函数，但是我们在 main.js 中只使用 sum 函数</li><li>现在按照上述配置开始打包代码，我们会发现打包主包中，foo 函数是没有的，但是 sub 函数依然存在 <ul><li>这是因为默认情况下 webpack<code>会对入口文件的代码进行Tree Shaking</code></li><li>但是<code>对于引入的文件并不会</code>进行 Tree Shaking</li></ul></li><li>这时候我们将<code>optimization</code>的<code>usedExports:true</code>,我们会发现在 math.js 中会有一个注释<code>/*unused harmony export sub*/</code><ul><li>这也是一个魔法注释</li><li>他的作用是在使用 Terser 代码的时候，可以放心的删掉这段代码</li></ul></li><li>但是这时候其实是没有删除代码的，<code>因为development模式的时候，是不会开启minimize的</code><ul><li>我们可以将<code>minimize:true</code>，这时候在打包代码可以发现 sub 函数没有了</li></ul></li><li><strong>所以 usedExports 方案实现 Tree Shaking 是要结合 Terser 的</strong></li></ul><h3 id="_4-7-4-sideeffects" tabindex="-1">4.7.4.sideEffects <a class="header-anchor" href="#_4-7-4-sideeffects" aria-label="Permalink to &quot;4.7.4.sideEffects&quot;">​</a></h3><ul><li><strong>sideEffects 用于告知 webpack compiler 哪些模块是有副作用的</strong><ul><li>比如我们导入了一个 a.js 文件但是没有用这个文件的变量，但是这个文件里面设置了一个全局的变量，那么 tree shaking 的时候把这个文件删除了后面的文件如果用到这个全局变量就会报错</li></ul></li><li><strong>在 package.json 中设置 sideEffects 的值</strong><ul><li>设置<code>false</code>：等于告诉 webpack compiler 可以安全的删除某些没有用到的导入文件</li><li>如果我们希望<code>可以保留一些文件</code>，可以将<code>值设为数组</code>，那么<code>数组的文件</code>都<code>不会被删除</code></li></ul></li><li><strong>在开发中尽量使用纯模块开发，方便 tree shaking</strong><ul><li>纯模块和纯函数一样的道理，就是不会产生副作用</li></ul></li></ul><p>main.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../css/style.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { sub, sum } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./utils/math&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 有用到sum变量，这个文件不会被tree shaking</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./utils/util&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这种方式引入的，如果设置了sideEffects：false那么会被删掉</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>package.json</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sideEffects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/math.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入的css文件和math.js不会被tree shaking</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-7-5-开发中如何使用" tabindex="-1">4.7.5.开发中如何使用 <a class="header-anchor" href="#_4-7-5-开发中如何使用" aria-label="Permalink to &quot;4.7.5.开发中如何使用&quot;">​</a></h3><ul><li>在开发中<code>推荐usedExports和sideEffects一起使用</code><ul><li>在 optimization 中配置 uesdExports:true（production 模式下 webpack 会自动设置）</li><li>在 package.json 文件中设置 sideEffects，直接对模块进行优化</li></ul></li></ul><h3 id="_4-7-6-css-中的-tree-shaking" tabindex="-1">4.7.6.CSS 中的 tree shaking <a class="header-anchor" href="#_4-7-6-css-中的-tree-shaking" aria-label="Permalink to &quot;4.7.6.CSS 中的 tree shaking&quot;">​</a></h3><ul><li>CSS 的 tree shaking 是<code>在打包代码的时候将没用到的选择器给删除掉</code></li><li>在早期的时候，我们会使用 PurifyCss 插件来完成 CSS 的 tree shaking，但是目前该库已经不再维护了(最新更新也是在 4 年前 了)</li><li><code>目前</code>我们可以使用另外一个库来完成 CSS 的 Tree Shaking:<code>PurgeCSS</code>，也是一个帮助我们删除未使用的 CSS 的工具 <ul><li><code>npm i purgercss-webpack-plugin -D</code></li><li>这个插件要结合<code>mini-css-extract-plugin</code>这个差价来使用</li></ul></li></ul><p><strong>配置 purgeCss</strong></p><ul><li>paths：表示要检测哪些目录下的内容需要被分析，我们可以借助<code>glob这个库</code>来实现</li><li><code>默认情况下</code>，purgecss 会将我们的<code>html标签样式移除</code>，如果希望保留，可以添加 safelist（白名单）</li><li><a href="https://www.npmjs.com/package/purgecss-webpack-plugin" target="_blank" rel="noreferrer">https://www.npmjs.com/package/purgecss-webpack-plugin</a> npm 地址</li></ul><p><strong>purgecss 也可以对 less、scss 等文件进行处理，所以他是对<code>打包后的css文件进行tree shaking操作</code>的</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> glob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;glob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 扫描某路径下的所有文件夹或文件,需要单独安装 npm i glob</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MiniCssExtractPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mini-css-extract-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PurgeCSSPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;purgecss-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {import(&#39;webpack&#39;).Configuration}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devtool: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MiniCssExtractPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css/style.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // tree shaking CSS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PurgeCSSPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      paths: glob.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__dirname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../src&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/**/*\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        nodir: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果只要文件 不要文件夹</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      safelist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        standard: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_4-8-scope-hoisting" tabindex="-1">4.8.Scope Hoisting <a class="header-anchor" href="#_4-8-scope-hoisting" aria-label="Permalink to &quot;4.8.Scope Hoisting&quot;">​</a></h2><ul><li><p>Scope Hoisting 翻译过来是<code>作用域提升</code>的意思,是<code>webpack3</code>中新增的一个功能</p><ul><li>功能是对作用域进行提升，并且让 webpack 打包后的代码更小、运行更快</li></ul></li><li><p><strong>默认情况下 webpack 打包会有很多的函数作用域，包括一些（比如最外层的）IIFE</strong></p><ul><li>无论是从最开始的代码运行，还是加载一个模块，都需要执行一系列的函数</li><li><code>scope hoisting可以将函数合并到一个模块中来运行</code></li><li>比如默认情况下在打包的时候，每个引入的文件其实都是在不同的作用域中的（webpack 通过函数包裹每个模块实现不同的作用域），比如在 main.js 中使用了 math.js 的 sum 函数，那么打包的时候，math.js 和 main.js 放在不同的作用域中，如果 main.js 想要使用 sum 就需要引入</li><li>使用了 scope hoisting 那么会将 math 和 main 放在一个作用域中，所以 main 就可以直接使用 math 的 sum 函数，不需要再次引入，进而减少代码体积，加快运行速度</li></ul></li><li><p>使用 Scope Hoisting 很简单，<strong>wepack 已经内置了对应的模块</strong></p><ul><li>在<code>production</code>模式下，默认这个<code>模块就会启用</code></li><li>在 development 模式下需要手动开启</li></ul></li><li><p><strong>如果存在同名的变量，那么 webpack 是不会作用域提升的</strong></p></li><li><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> webpack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpack&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webpack.optimize.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModuleConcatenationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li></li></ul><h2 id="_4-9-http-压缩" tabindex="-1">4.9.HTTP 压缩 <a class="header-anchor" href="#_4-9-http-压缩" aria-label="Permalink to &quot;4.9.HTTP 压缩&quot;">​</a></h2><h3 id="_4-9-1-什么是-http-压缩" tabindex="-1">4.9.1.什么是 HTTP 压缩 <a class="header-anchor" href="#_4-9-1-什么是-http-压缩" aria-label="Permalink to &quot;4.9.1.什么是 HTTP 压缩&quot;">​</a></h3><ul><li><strong>HTTP 压缩是一种内置在 服务器 和 客户端 之间的，以改进传输速度和带宽利用率的方式</strong></li><li>HTTP 压缩的流程 <ul><li>第一步:HTTP 数据在服务器发送前就已经被压缩了;(可以在 webpack 中完成)</li><li>第二步:兼容的浏览器在向服务器发送请求时，会告知服务器自己支持哪些压缩格式;</li><li>第三步:服务器在浏览器支持的压缩格式下，直接返回对应的压缩后的文件，并且在响应头中告知浏览器;</li></ul></li></ul><h3 id="_4-9-2-目前的压缩格式" tabindex="-1">4.9.2.目前的压缩格式 <a class="header-anchor" href="#_4-9-2-目前的压缩格式" aria-label="Permalink to &quot;4.9.2.目前的压缩格式&quot;">​</a></h3><ul><li><strong>目前的压缩格式非常的多</strong>: <ul><li>compress – UNIX 的“compress”程序的方法(历史性原因，不推荐大多数应用使用，应该使用 gzip 或 deflate);</li><li><code>deflate </code>– 基于 deflate 算法(定义于 RFC 1951)的压缩，使用 zlib 数据格式封装;</li><li><code>gzip</code> – GNU zip 格式(定义于 RFC 1952)，是目前使用比较广泛的压缩算法;</li><li><code>br</code>– 一种新的开源压缩算法，专为 HTTP 内容的编码而设计;</li></ul></li></ul><h3 id="_4-9-3-webpack-对文件压缩" tabindex="-1">4.9.3.webpack 对文件压缩 <a class="header-anchor" href="#_4-9-3-webpack-对文件压缩" aria-label="Permalink to &quot;4.9.3.webpack 对文件压缩&quot;">​</a></h3><ul><li>使用 CompressionPlugin 来进行压缩</li><li><code>npm i compression-webpack-plugin -D</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CompressionWebpackPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;compression-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // http压缩</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CompressionWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配要压缩哪些文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // threshold: 500, // 设置文件从多大开始压缩</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minRatio: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 至少的压缩比例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      algorithm: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gzip&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 采用的压缩算法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_4-9-4-html-文件中的代码压缩" tabindex="-1">4.9.4.HTML 文件中的代码压缩 <a class="header-anchor" href="#_4-9-4-html-文件中的代码压缩" aria-label="Permalink to &quot;4.9.4.HTML 文件中的代码压缩&quot;">​</a></h3><ul><li>我们之前使用了<strong>HtmlWebpackPlugin</strong>插件来生成 HTML 的模板，事实上它还有一些其他的配置:</li><li><strong>inject</strong>:设置打包的资源插入的位置 <ul><li>true、 false 、body、head</li></ul></li><li><strong>cache</strong>:设置为 true，只有当文件改变时，才会生成新的文件(默认值也是 true)</li><li><strong>minify</strong>:默认会使用一个插件 html-minifier-terser 来压缩 html 文件</li><li><strong>事实上 HtmlWebpackPlugin 会根据 mode 模式来进行压缩，当 production 模式下已经默认配置了一些压缩配置</strong>，当然如果不满意可以进行自定义配置</li><li>minify 配置详情 <a href="https://github.com/kangax/html-minifier#options-quick-reference" target="_blank" rel="noreferrer">https://github.com/kangax/html-minifier#options-quick-reference</a></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HtmlWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      template: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minify: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        removeComments: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移除注程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        collapseWhitespace: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 折叠空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        removeRedundantAttributes: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移除多余的属性 type=text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useShortDoctype: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 比如我们的模板是html4，那么会转成html5的文档</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        removeEmptyAttributes: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移除空的属性 id=&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        removeStyleLinkTypeAttributes: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 比如link中的 type=&quot;text/css&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keepClosingSlash: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否保持单元凑的尾部/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        minifyCSS: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否压缩css</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_4-10-打包分析" tabindex="-1">4.10.打包分析 <a class="header-anchor" href="#_4-10-打包分析" aria-label="Permalink to &quot;4.10.打包分析&quot;">​</a></h2><h3 id="_4-10-1-打包时间的分析" tabindex="-1">4.10.1.打包时间的分析 <a class="header-anchor" href="#_4-10-1-打包时间的分析" aria-label="Permalink to &quot;4.10.1.打包时间的分析&quot;">​</a></h3><ul><li>默认情况下只能看到全部打包的时间，如果想要看到某个 plugin 或 loader 的打包时间，可以借助三方插件来实现</li><li>观看某个 plugin 或 loader 的打包时间，我们就可以得知那个比较耗时，然后对症下药</li><li><code>npm i speed-measure-webpack-plugin -D </code></li><li><strong>注意</strong> 如果使用这个插件倒是某个插件报错，先把报错的插件注释掉即可，因为这个插件可能会不兼容某些插件，我们只是用来做打包时间分析的，分析完毕后正常打包就行</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SpeedMeasurePlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;speed-measure-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> smp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpeedMeasurePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将配置包裹，测试完毕后可以返回原配置，如果没有不兼容的情况也可以不反回 无伤大雅</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> smp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins:[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_4-10-2-打包后文件分析" tabindex="-1">4.10.2.打包后文件分析 <a class="header-anchor" href="#_4-10-2-打包后文件分析" aria-label="Permalink to &quot;4.10.2.打包后文件分析&quot;">​</a></h3><ul><li>有两种方案，都是 webpack 官方提供的</li></ul><p><strong>方案一</strong></p><ul><li><p>在执行打包命令的时候 生成一个 json 文件，然后将文件上传到一个网站上，然后在线分析</p></li><li><p>加上--profile --json=文件名</p></li><li><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack --config ./webpack-config/comm.config.js --env production --profile --json=stats.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>将生成的 json 文件放到<a href="http://webpack.github.com/analyse%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%8A" target="_blank" rel="noreferrer">http://webpack.github.com/analyse这个网站上</a></p></li><li><p>但是目前这个网站打开，可以将这个仓库克隆到本地，然后启动</p></li></ul><p><strong>方案二</strong></p><ul><li><p>使用<code>webpack-bundle-analyzer</code>插件工具</p></li><li><p><code>npm i webpack-bundle-analyzer -D</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BundleAnalyzerPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpack-bundle-analyzer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BundleAnalyzerPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li><p><strong>在打包 webpack 的时候，这个工具是帮助我们打开一个 8888 端口上的服务，我们可以直接的看到每个包的大小。</strong></p></li><li><p>比如有一个包时通过一个 Vue 组件打包的，但是非常的大，那么我们可以考虑是否可以拆分出多个组件，并且对其进行懒加载;</p></li><li><p>比如一个图片或者字体文件特别大，是否可以对其进行压缩或者其他的优化处理;</p></li></ul><h1 id="_5-自定义-loader-plugin" tabindex="-1">5.自定义 loader - plugin <a class="header-anchor" href="#_5-自定义-loader-plugin" aria-label="Permalink to &quot;5.自定义 loader - plugin&quot;">​</a></h1><h2 id="_5-1-自定义-loader" tabindex="-1">5.1.自定义 loader <a class="header-anchor" href="#_5-1-自定义-loader" aria-label="Permalink to &quot;5.1.自定义 loader&quot;">​</a></h2><ul><li>loader 本质上就是一个<code>导出的函数模块</code><ul><li>eg: module.exports = function() {}</li></ul></li><li>webpack 运行的时候会使用<code>loader runner库</code>来调用 loader</li><li><strong>注意</strong> 必须要使用<code>commonJS的导出规范</code>(module.exports || exports ),因为 webpack 是背靠 node 运行的，且<code>不能是箭头函数</code>，因为当运行时，loader runner 库会调用 loader 并且绑定 this</li></ul><h3 id="_5-1-1-loader-接受的参数" tabindex="-1">5.1.1.loader 接受的参数 <a class="header-anchor" href="#_5-1-1-loader-接受的参数" aria-label="Permalink to &quot;5.1.1.loader 接受的参数&quot;">​</a></h3><ul><li><code>content</code>： 资源文件的内容</li><li><code>map</code>：sourcemap 相关的数据</li><li><code>meta</code>：一些原始数据</li></ul><p><strong>自定义 loader 的时候一定要将处理过的内容返回出去，不然后续 loader 拿不到资源内容</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-1-2-读取-loader-的路径" tabindex="-1">5.1.2.读取 loader 的路径 <a class="header-anchor" href="#_5-1-2-读取-loader-的路径" aria-label="Permalink to &quot;5.1.2.读取 loader 的路径&quot;">​</a></h3><ul><li>当我们自定义一个 loader，那么怎么读取 loader 呢</li><li><strong>webpack 读取 loader 的顺序</strong><ul><li>webpack 解析 loader 时，</li><li>如果当前的 loader 是一个路径，那么久按照当前路径查找 loader</li><li>如果是一个名字，那么回去查看<code>resolveLoader.alias</code>中是否有映射，如果有就用</li><li>如果没有就会拿到<code>resolveLoader.modules</code>中的目录去匹配目录下是否有该 loader</li><li><code>名字可以不用写js后缀</code>，因为后缀可以由 extends 属性决定</li></ul></li></ul><p><strong>方式一： 绝对路径或相对路径</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // loader: path.resolve(__direname, &#39;./loaders/loader01.js&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./loaders/loader01.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>方式二：resolveLoader.alias</strong></p><ul><li>这种方式其实就时给 loader 起一个别名</li><li>当 webpack 解析到 loader，如果<code>没有给路径</code>那么就会直接去<code>查找alias中</code>是否映射了该 loader 的路径</li><li>但是<code>如果我们的loader一多起来</code>，会<code>导致代码过于冗余</code>，所以可以使用方式三</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resolveLoader: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    alias: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //起个别名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       //hloader: path.resolve(__direname, &#39;./loaders/loader01.js&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     	 hloader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./ym-loaders/01-loaders01.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        loader:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hloader&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>方式三：resolveLoader.modules</strong></p><ul><li>可以通过 modules 给 webpack 解析 loader 提供一个查找目录</li><li>modules 的默认值是<code>modules:[&#39;node_modules&#39;]</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resolveLoader: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        loader:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-loader&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li></li><li></li></ul><h3 id="_5-1-3-loader-的执行顺序" tabindex="-1">5.1.3.loader 的执行顺序 <a class="header-anchor" href="#_5-1-3-loader-的执行顺序" aria-label="Permalink to &quot;5.1.3.loader 的执行顺序&quot;">​</a></h3><ul><li>默认情况下：<code>由后往前(从右向左)</code></li></ul><p>loader 的执行顺序有三种，分别是 pre、normal、post，因为 webpack 还支持<code>内联方式配置loader</code>，所以 loader 的执行顺序<code>其实是有四种的</code>，顺序是<code>pre(前置)-&gt;normal(正常)-&gt;inline(内联)-&gt;post(后置)</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 内联方式配置loader</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Styles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;style-loader!css-loader?modules!./styles.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>那么如何改变 loader 的执行顺序呢？</strong></p><ul><li>这时候需要用到<code>enforce</code>属性,<code>如果不写该属性代表是normal</code><ul><li><code>pre</code>：前置</li><li><code>post</code>：后置</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resolveLoader: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        loader:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-loader01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  			enforce:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pre&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  		{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        loader:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-loader02&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  			enforce:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-1-4-loader-的阶段" tabindex="-1">5.1.4.loader 的阶段 <a class="header-anchor" href="#_5-1-4-loader-的阶段" aria-label="Permalink to &quot;5.1.4.loader 的阶段&quot;">​</a></h3><ul><li>loader 有<strong>两个阶段</strong>，<strong>pitch 阶段和 normal 阶段</strong><ul><li>这两个阶段对应两个 loader <code>pitch loader和normal loader(正常的loader)</code></li></ul></li><li>在处理资源文件前，<code>首先会经历pitch阶段</code>，处理资源内容</li><li><code>pitch阶段结束后</code>，才会将资源内容<code>传递给normal阶段</code></li><li><a href="https://juejin.cn/post/7036379350710616078#heading-12" target="_blank" rel="noreferrer">https://juejin.cn/post/7036379350710616078#heading-12</a> 这个有详解</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5534bf720eba4c26ba2d3f3a3f2c057e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt=""></p><p><strong>pitch 阶段的执行顺序</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>post -&gt; inline -&gt; normal -&gt; pre</span></span></code></pre></div><p><strong>normal 阶段的执行顺序</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pre -&gt; normal -&gt; -&gt;inline -&gt; post</span></span></code></pre></div><ul><li><strong>由上综述，可以解释为什么 loader 的加载顺序是由后往前的了</strong></li></ul><h4 id="_5-1-3-1-如何实现-pitch-loader" tabindex="-1">5.1.3.1.如何实现 pitch loader <a class="header-anchor" href="#_5-1-3-1-如何实现-pitch-loader" aria-label="Permalink to &quot;5.1.3.1.如何实现 pitch loader&quot;">​</a></h4><ul><li>pitch 阶段其<code>也是一个函数</code>，只不过这个函数是 normal loader 函数上的 pitch 属性</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loader01:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pitch loader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pitch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;first&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loader;</span></span></code></pre></div><h4 id="_5-1-3-1-pitch-loader-的熔断效果" tabindex="-1">5.1.3.1.pitch loader 的熔断效果 <a class="header-anchor" href="#_5-1-3-1-pitch-loader-的熔断效果" aria-label="Permalink to &quot;5.1.3.1.pitch loader 的熔断效果&quot;">​</a></h4><ul><li>因为 pitch 也是一个函数，如果<code>返回undefined</code>，那么<code>会继续执行后续的loader</code></li><li>如果<code>返回一个非undefined的值</code>，比如返回&#39;loveyou&#39;这个字符串，那么久不会执行后续的 loader 而是直接执行前一个 normal loader，且这个 normal loadr 的内容就不是资源文件内容而是&#39;loveyou&#39;</li><li>这种情况就叫 pitch loader 的熔断效果，开发中要避免这种情况的出现</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4df62ce00b9745fab4dee2dc098ddb09~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt=""></p><h3 id="_5-1-5-同步-loader-和异步-loader" tabindex="-1">5.1.5.同步 loader 和异步 loader <a class="header-anchor" href="#_5-1-5-同步-loader-和异步-loader" aria-label="Permalink to &quot;5.1.5.同步 loader 和异步 loader&quot;">​</a></h3><ul><li><strong>同步 loader</strong>：如果当前 loader 中有耗时操作是不会等待该操作完成后才返回结果</li><li><strong>异步 loader</strong>：如果当前 loader 中有耗时操作，会等待当前 loader 中耗时操作完毕后，才去调用后续 loader</li></ul><h4 id="_5-1-5-1-同步-loader" tabindex="-1">5.1.5.1.同步 loader <a class="header-anchor" href="#_5-1-5-1-同步-loader" aria-label="Permalink to &quot;5.1.5.1.同步 loader&quot;">​</a></h4><ul><li>默认创建的 Loader 就是同步 Loader</li><li>这个 Loader 必须通过<code>return</code> 或者<code>this.callback</code>来返回结果，交给下一个 loader</li><li>通常在<code>有错误情况下</code>，会使用<code>this.callback</code>来返回结果 <ul><li>比如 if(a === 20) 报错</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loader04:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 同步loader可以直接return内容给下一个loader</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 也可以通过callbalck 返回内容 使用callback可以返回一个错误在控制台</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.callback;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 参数一：报错信息 无报错直接写null</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 参数二：下个loader的入参</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ccc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // return content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="_5-1-5-2-异步-loader" tabindex="-1">5.1.5.2.异步 loader <a class="header-anchor" href="#_5-1-5-2-异步-loader" aria-label="Permalink to &quot;5.1.5.2.异步 loader&quot;">​</a></h4><ul><li>有两种方式 <ul><li><code>this.async()</code>建议使用这中，报错会比较明显</li><li><code>Promise</code></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loader03:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 方式一</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 异步loader 调用this.async()函数告诉后面的loader等待</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 第一参数是错误信息 如果没有写null即可</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //第二个参数是下一个loader的入参</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 方式二</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // return new Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //   setTimeout(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //     if (true) reject(&#39;错了错了&#39;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //     resolve(content + &#39;aaa&#39;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //   }, 2000)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_5-1-6-传递参数" tabindex="-1">5.1.6.传递参数 <a class="header-anchor" href="#_5-1-6-传递参数" aria-label="Permalink to &quot;5.1.6.传递参数&quot;">​</a></h3><ul><li>给 loader<strong>传递参数</strong>，需要用到<code>options</code>属性，</li><li>这里注意，配置 loader，<code>不可以使用use属性</code>，要使用 loader 属性</li><li><strong>接收参数</strong>，使用<code>this.getOptions()</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //   test: /\\.js$/,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //   use: &#39;loader4&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果想要传递参数 不可以使用use属性来配置loader，要用loader属性配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loader5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          plugin: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// loader5.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 获取使用loader时使用的参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 方式一：早期的时候需要使用loader-utils(webpack开发的)库来回去参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 方式二：目前，可以直接通过this.getOptions方法获取</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;options:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loader04:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="_5-1-6-1-校验参数" tabindex="-1">5.1.6.1.校验参数 <a class="header-anchor" href="#_5-1-6-1-校验参数" aria-label="Permalink to &quot;5.1.6.1.校验参数&quot;">​</a></h4><ul><li>校验传递来的参数，是否符合自己的要求 <ul><li>比如我们开发一个 loader 给别人用，要求传入的 name 是一个 string 类型，但是传入的是一个 number 类型，那么就要给用于一个提醒</li></ul></li><li>使用的是 webpack 提供的<code>schema-utils</code>库 <ul><li><code>npm i schema-utils -D</code></li></ul></li><li>这个校验规则是自己编写的 schema</li></ul><p>loaderSechema.json</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 参数的类型</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 参数属性有哪些规则</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name必须是string类型&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 报错信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;age必须是number类型&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_5-2-自定义-plugin" tabindex="-1">5.2.自定义 plugin <a class="header-anchor" href="#_5-2-自定义-plugin" aria-label="Permalink to &quot;5.2.自定义 plugin&quot;">​</a></h2><ul><li>我们知道<code>webpack</code>有两个非常重要的类:<code>Compiler</code>和<code>Compilation</code><ul><li>他们<code>通过注入插件的方式</code>，来<code>监听</code>webpack 的<code>所有生命周期</code></li><li><code>插件的注入离不开各种各样的Hook</code>，而他们的 Hook 是如何得到的呢?</li><li>其实是<code>创建了Tapable库中的各种Hook的实例</code></li></ul></li><li><strong>所以，如果我们想要学习自定义插件，最好先了解一个库:Tapable</strong><ul><li><code>Tapable</code>是官方编写和维护的一个库;</li><li><code>Tapable</code>是管理着需要的 Hook，这些 Hook 可以被应用到我们的插件中;</li></ul></li></ul><h3 id="_5-2-1-tapable-库" tabindex="-1">5.2.1.Tapable 库 <a class="header-anchor" href="#_5-2-1-tapable-库" aria-label="Permalink to &quot;5.2.1.Tapable 库&quot;">​</a></h3><p><strong>Tapable 的 Hook 分类</strong></p><ul><li><strong>同步和异步</strong><ul><li>以<code>sync</code>开头的，是<code>同步</code>的 Hook</li><li>以<code>async</code>开头的，是<code>异步</code>的 Hook，（如果有两个事件，后续的事件是不会等待上一个事件执行完毕的）</li></ul></li><li><strong>与同步异步结合的类别</strong><ul><li><code>bail：</code>当有返回值时，就不会执行后续的事件</li><li><code>loop：</code>当返回值为 true，就会反复执行该事件，当返回值为 undefined 或不返回内容，就退出该事件</li><li><code>waterfall：</code>当返回值不为 undefined，会将这次的返回结果作为下一次事件的第一个参数</li><li><code>parallel：</code>并行，会同时执行事件</li><li><code>series：</code>串行，会等待上一个事件执行完毕后才执行</li></ul></li><li>结合栗子 <ul><li>syncBail、syncLoop、syncWaterfall</li><li>asyncParallel、asyncSeries、asyncParallelBail 等</li></ul></li></ul><p><strong>使用列子</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SyncHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tapable&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YmCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 1.创建hooks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      syncHook: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SyncHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //2.用hooks监听事件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks.syncHook.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event1:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name, age);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks.syncHook.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event2:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name, age);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compiler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YmCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compiler.hooks.syncHook.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;章三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AsyncSeriesHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tapable&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AsyncSeriesHook 串行，会等待当前事件执行完毕后，才执行下一个事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YmCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 1.创建hooks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      asyncSeriesHook: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AsyncSeriesHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //2.用hooks监听事件  监听异步事件用 tapAsync 和 callAsync</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用串行 必须要传入一个回调函数 然后在事件中调用这个回调</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks.asyncSeriesHook.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tapAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event1:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name, age);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks.asyncSeriesHook.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tapAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event2:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name, age);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compiler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YmCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compiler.hooks.asyncSeriesHook.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;章三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;所有事件执行完毕～&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="_5-2-2-自定义-plugin" tabindex="-1">5.2.2.自定义 plugin <a class="header-anchor" href="#_5-2-2-自定义-plugin" aria-label="Permalink to &quot;5.2.2.自定义 plugin&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义plugin 要么是一个函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 要么是一个对象， 如果是对象 那么必须实现apply 方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  compiler.hooks.xxx   xxx类似vue中的生命周期钩子</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// https://webpack.docschina.org/contribute/writing-a-plugin#root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack插件的核心就是使用了tapable这个库  所以用法和tapable一样</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoUploadWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 外界就可以穿参进来  eg：new AutoUploadWebpackPlugin({name:&#39;123&#39;})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compiler.hooks.afterEmit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tapAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AutoUploadWebpackPlugin;</span></span></code></pre></div>`,307)]))}const c=i(p,[["render",e]]);export{o as __pageData,c as default};
