import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.BFVHecrR.js";const c=JSON.parse('{"title":"node","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/node-basic.md","filePath":"engineering/node-basic.md"}'),e={name:"engineering/node-basic.md"};function p(t,s,h,k,d,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="node" tabindex="-1">node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;node&quot;">​</a></h1><p>主要的内容是和前端工程化相关的</p><h1 id="_1-定义" tabindex="-1">1.定义 <a class="header-anchor" href="#_1-定义" aria-label="Permalink to &quot;1.定义&quot;">​</a></h1><p><strong>官方定义</strong></p><ul><li>Node.js 是一个基于<code>V8 JavaScript引擎</code>的<code>JavaScript</code>运行时环境</li></ul><p><strong>自己理解</strong></p><ul><li>Node.js 基于 V8 引擎来执行 JavaScript 的代码，但是不仅仅只有 V8 引擎 <ul><li>V8 可以<code>嵌入任何C++应用程序中</code>，无论是<code>chrome</code>还是<code>node</code>，事实上都是嵌入了 V8 引擎来执行 JavaScript 代码</li><li>但是只是嵌入，比如 chrome 中还有<code>别的程序来执行解析、渲染、浏览器的API</code>等</li><li>那么 node 中也有别的程序来执行<code>别的操作，比如文件系统的读写、网络的IO</code>等</li></ul></li></ul><h1 id="_2-特殊的全局对象" tabindex="-1">2.特殊的全局对象 <a class="header-anchor" href="#_2-特殊的全局对象" aria-label="Permalink to &quot;2.特殊的全局对象&quot;">​</a></h1><ul><li>这些全局对象实际上是模块中得变量，只是<code>每个模块都有</code>，<code>看起来像是全局变量</code></li><li>在命令行交互中是不可以使用的</li><li>包括 <ul><li><code>__dirname、__filename、eports、module、require()</code></li></ul></li></ul><h1 id="_3-模块化开发" tabindex="-1">3.模块化开发 <a class="header-anchor" href="#_3-模块化开发" aria-label="Permalink to &quot;3.模块化开发&quot;">​</a></h1><h2 id="_3-1-定义" tabindex="-1">3.1.定义 <a class="header-anchor" href="#_3-1-定义" aria-label="Permalink to &quot;3.1.定义&quot;">​</a></h2><ul><li></li></ul><h2 id="_3-2-模块化历史" tabindex="-1">3.2.模块化历史 <a class="header-anchor" href="#_3-2-模块化历史" aria-label="Permalink to &quot;3.2.模块化历史&quot;">​</a></h2><ul><li>ES6 之前 JavaScript 是没有模块化得概念的</li><li><code>直到ES6(2015)</code>才推出了自己的<code>模块化方案(ESModule)</code></li><li>在此之前，为了让 JavaScript 支持模块化，涌出很多不同的模块化规范:<code>AMD、CMD、CommonJS</code></li></ul><h2 id="_3-3-commonjs" tabindex="-1">3.3.CommonJS <a class="header-anchor" href="#_3-3-commonjs" aria-label="Permalink to &quot;3.3.CommonJS&quot;">​</a></h2><ul><li><code>CommonJS是一个规范</code>，最初提出来是在浏览器以外的地方使用，并且当时名命为<code>ServerJS</code>，后来为了体现他的广泛性，修改为<code>CommonJS</code>，平时也会简称<code>CJS</code><ul><li><code>Node是</code>CommonJS 在<code>服务器端</code>一个具有代表性的实现</li><li><code>webpack打包工具</code>具备对 CommonJS 的<code>支持和转换</code></li></ul></li><li>Node 中<code>对CommonJS进行了支持和实现</code>，让我们在开发 node 的过程中可以方便的进行模块化开发 <ul><li>在 Node 中每一个 js 文件都是一个单独的模块</li><li>这个模块中包含 CommonJS 规范的核心变量，<code>exports、module.exports、require</code></li></ul></li><li>模块化的核心是<code>导出和导入</code>，Node 中对其进行了实现 <ul><li><code>exports</code>和<code>module.exports</code>可以负责对模块中的内容进行<code>导出</code></li><li><code>require</code>函数可以<code>导入</code>其他模块中的内容</li></ul></li></ul><h3 id="_3-3-1-exports-导出" tabindex="-1">3.3.1.exports 导出 <a class="header-anchor" href="#_3-3-1-exports-导出" aria-label="Permalink to &quot;3.3.1.exports 导出&quot;">​</a></h3><ul><li><p>exports 是一个对象，可以在对象中添加属性，添加的属性会被导出</p></li><li><p><strong>导出导入的原理</strong></p><ul><li>require(url)对象的时候，其实是通过 url 找到文件</li><li>然后拿到文件的 exports 对象，将其赋值给接收的变量</li><li>那么其实导出和导入的文件里面的 exports<code>对象都是同一个</code></li><li>简单来说，导出和导入的对象其实就是<code>赋值引用</code>的关系</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jack&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;sdfsd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//b.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行b.js文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以看到在定时器结束后名字也变了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { name: &#39;jack&#39; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { name: &#39;sdfsd&#39; }</span></span></code></pre></div></li></ul><h3 id="_3-3-2-module-exports-导出" tabindex="-1">3.3.2.module.exports 导出 <a class="header-anchor" href="#_3-3-2-module-exports-导出" aria-label="Permalink to &quot;3.3.2.module.exports 导出&quot;">​</a></h3><ul><li>CommonJS 中是没有<code>module.exports</code>的概念的 <ul><li>为了符合 CommonJS 的规范，所以设计了一个 exports 对象</li><li>默认情况下 module.exports 指向 exports 对象(exports = module.exports)</li></ul></li><li>但是为了实现模块的导出，Node 中<code>使用的是Module的类</code>，每一个模块都是 Module 的一个实例，也就是 module</li><li>所以在 Node 中真正<code>用于导出</code>的其实根本不是 exports，而<code>是module.exports</code><ul><li>所以 module.exports 的<code>优先级高于</code>exports</li></ul></li><li>因为 module 才是导出的正真实现者</li></ul><h3 id="_3-3-3-require" tabindex="-1">3.3.3.require <a class="header-anchor" href="#_3-3-3-require" aria-label="Permalink to &quot;3.3.3.require&quot;">​</a></h3><ul><li>require 是一个函数，可以引入一个文件(模块)中的导出对象</li></ul><p><strong>require 的查找规则</strong></p><p>导入格式如下：</p><p>​ <strong>require(X)</strong></p><ul><li><p><strong>情况一</strong>：X 是一个 Node 的<code>核心模块</code>，如 http、path</p><ul><li><code>直接返回</code>核心模块，并<code>停止查找</code></li></ul></li><li><p><strong>情况二</strong>：X 是以<code>./</code>或<code>../</code>或<code>/</code>(根目录)开头的</p><ul><li><code>第一步</code>：将 X 当作一个文件在对应的目录下查找 <ul><li>如果<code>有后缀名</code>，按照后缀名的格式查找文件</li><li>如果<code>没有后缀名</code>，会按照如下顺序 <ol><li>直接查找文件 X</li><li>查找 X.js 文件</li><li>查找 X.json 文件</li><li>查找 X.node 文件</li></ol></li></ul></li><li><code>第二步</code>：没有找到对应的文件，将 X 作为一个目录 <ul><li>查找目录下的 index 文件，按照如下顺序 <ol><li>查找 X/index.js 文件</li><li>查找 X/index.json 文件</li><li>查找 X/index.node 文件</li></ol></li></ul></li><li>如果<code>都没有找到，报错</code></li></ul></li><li><p><strong>情况三</strong>：直接是 X，并且 X 不是核心模块</p><ul><li><p>会在当前文件夹的<code>node_modules文件夹</code>下查找 X 文件</p><ul><li>查找的顺序和上面一样</li></ul><p>如果当前文件夹没有 node_modules，会<code>一级一级的往上级查找</code>这个 node_modules 文件夹，直到查找<code>到根目录</code>，没有就报错</p></li></ul></li></ul><h3 id="_3-3-4-node-模块加载解析过程" tabindex="-1">3.3.4.Node 模块加载解析过程 <a class="header-anchor" href="#_3-3-4-node-模块加载解析过程" aria-label="Permalink to &quot;3.3.4.Node 模块加载解析过程&quot;">​</a></h3><ul><li><strong>结论一：模块在被第一次引入时，模块中的 js 代码<code>会被运行一次</code></strong></li><li><strong>结论二：模块在被多次引入时，<code>会缓存</code>，最终<code>只加载(运行)一次</code></strong><ul><li>因为每个模块对象 module 都有一个属性，<code>loaded</code></li><li>为 false 表示还没加载，为 true 表示已经加载</li></ul></li><li><strong>结论三：如果有循环引用，加载顺序时<code>按照深度优先算法</code>来执行的</strong><ul><li>有以下的文件引用关系</li><li>main 引入 a.js 和 b.js</li><li>a.js 引入 c.js c.js 引入 d.js. d.js 引入 e.js</li><li>b.js 引入 c.js 和 e.js</li><li>这种引用关系是一种数据结构：<code>图结构</code><ul><li>图结构在遍历过程中有<code>深度优先</code>搜索和<code>广度优先</code>搜索</li></ul></li><li>执行顺序是：main.js - a.js - c.js - d.js - e.js - b.js <ul><li>因为 c.js 已经被加载过一次，所以 b 引用的时候就不会被加载了</li></ul></li></ul></li></ul><h3 id="_3-3-5-commonjs-的缺点" tabindex="-1">3.3.5.CommonJS 的缺点 <a class="header-anchor" href="#_3-3-5-commonjs-的缺点" aria-label="Permalink to &quot;3.3.5.CommonJS 的缺点&quot;">​</a></h3><ul><li><p>CommonJS 加载模块都<code>是同步的</code></p><ul><li>同步意味着<code>只有等待对应的模块加载完毕，当前模块中的内容才能被运行</code></li><li>这个在服务器不会有什么问题，因为<code>服务器加载js文件都是本地文件</code>，加载<code>速度非常快</code></li></ul></li><li><p>浏览器中，通常是不使用 CommonJS 规范</p><ul><li>浏览器加载 js 文件需要先从服务器将文件下载下来，之后在加载运行</li><li>那么采用同步的就意味着后续的 js 代码都无法正常运行，即使是一些简单的 DOM 操作</li></ul></li></ul><h2 id="_3-4-es-module" tabindex="-1">3.4.ES Module <a class="header-anchor" href="#_3-4-es-module" aria-label="Permalink to &quot;3.4.ES Module&quot;">​</a></h2><ul><li>是 EcmaScript 推出的模块化规范</li><li>使用<code>import</code>（导入）和<code>export</code>（导出）关键字</li><li>它采用编译期的静态分析，并且加入了动态引入的方式</li><li>采用 ES Module 将<code>自动采用严格模式</code>：use strict</li></ul><h3 id="_3-4-1-导出导入的使用语法" tabindex="-1">3.4.1.导出导入的使用语法 <a class="header-anchor" href="#_3-4-1-导出导入的使用语法" aria-label="Permalink to &quot;3.4.1.导出导入的使用语法&quot;">​</a></h3><ul><li>export {<code>标识符</code> 1，标识符 2，... } <ul><li>{} <code>不是对象</code> 是 export 的特殊语法，所以里面的值也不是对象的增强写法</li></ul></li><li>import {标识符 1，标识符 2，... } from xxx.xxx <ul><li>{} <code>不是对象</code>，是 import 的特殊语法，用来设置接收的导出对象的</li><li>from 后面的路径<code>必须加后缀名</code></li></ul></li></ul><p><strong>注意</strong></p><ul><li>当打开对应的 html 文件时，如果 html 中有使用模块化的代码，那么必须开启一个服务来打开</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name, age, sayHello };</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name, age, sayHello } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="_3-4-2-export-关键字" tabindex="-1">3.4.2.export 关键字 <a class="header-anchor" href="#_3-4-2-export-关键字" aria-label="Permalink to &quot;3.4.2.export 关键字&quot;">​</a></h3><ul><li><p>导出的三种方式（常见）</p></li><li><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式二 导出时给标识符起一个别名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fname };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式三 定义时直接导出，这中方式不可以起别名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div></li></ul><h3 id="_3-4-3-import-关键字" tabindex="-1">3.4.3.import 关键字 <a class="header-anchor" href="#_3-4-3-import-关键字" aria-label="Permalink to &quot;3.4.3.import 关键字&quot;">​</a></h3><ul><li><p>导入的三种方式（常见）</p></li><li><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式一：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//方式二：起别名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fname } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方式三：导入时给整个模块起别名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fname.name);</span></span></code></pre></div></li></ul><h3 id="_3-4-4-import-和-export-结合使用" tabindex="-1">3.4.4.import 和 export 结合使用 <a class="header-anchor" href="#_3-4-4-import-和-export-结合使用" aria-label="Permalink to &quot;3.4.4.import 和 export 结合使用&quot;">​</a></h3><p>有 index.js 文件,是其他文件的入口文件</p><ul><li>默认情况</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatCount } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./formatCount.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatDate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./formatDate.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatCount, formatDate };</span></span></code></pre></div><ul><li>情况一</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatCount } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./formatCount.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatDate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./formatDate.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//等价于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatCount } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./formatCount.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatDate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./formatDate.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatCount, formatDate };</span></span></code></pre></div><ul><li>情况二</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这种方式时将文件内的内容全部引入，然后再导出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./formatCount.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./formatDate.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="_3-4-5-default-默认导出" tabindex="-1">3.4.5.default(默认导出) <a class="header-anchor" href="#_3-4-5-default-默认导出" aria-label="Permalink to &quot;3.4.5.default(默认导出)&quot;">​</a></h3><ul><li>默认<code>导出</code>可以<code>不需要指定名字</code></li><li>在导入时<code>不需要使用{}</code>,并且可以<code>自己指定名字</code></li><li><strong>注意</strong>：在一个模块中，<code>只能有一个</code>默认导出</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a.js(导出文件)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b.js(导入文件)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="_3-4-6-import-函数" tabindex="-1">3.4.6.import 函数 <a class="header-anchor" href="#_3-4-6-import-函数" aria-label="Permalink to &quot;3.4.6.import 函数&quot;">​</a></h3><ul><li><p>通过 import 加载一个模块，是不可以将其放到逻辑代码中的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码报错</span></span></code></pre></div><ul><li>因为<code>ES Module再被JS引擎解析</code>时，就<code>必须知道他的依赖关系</code></li><li>由于<code>这时候js代码没有任何的运行</code></li><li>甚至<code>拼接路径的写法也是错误</code>的，因为必须到运行时才能确定 path 的值</li></ul></li><li><p>但是再某种情况下，<code>希望动态的加载某一个模块</code></p></li><li><p>这时候可以使用<code>import函数</code>来动态加载</p><ul><li>import 函数<code>返回一个promise</code>，可以通过 then 方法获取结果</li></ul></li><li><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><p><strong>import.meta</strong></p><ul><li>import.meta 是一个给 JavaScript 模块暴露特定上下文的元数据属性的对象 <ul><li>它包含了这个模块的信息，比如模块的 URL</li><li>ES11 中新增的特性</li></ul></li></ul><h3 id="_3-4-7-es-module-的解析流程" tabindex="-1">3.4.7.ES Module 的解析流程 <a class="header-anchor" href="#_3-4-7-es-module-的解析流程" aria-label="Permalink to &quot;3.4.7.ES Module 的解析流程&quot;">​</a></h3><ul><li>分为三个阶段</li><li>阶段一：构建(Construction)，根据地址查找 js 文件，并且下载，将其解析成模块记录(Module Record)</li><li>阶段二：实例化(Instantiation)，对模块记录进行实例化，并且分配内存空间，解析模块的导入和导出语句，把模块指向对应的内存地址</li><li>阶段三：运行(Evaluation)，运行代码，计算值，并且将值填充到内存地址中</li></ul><h1 id="_4-包管理工具" tabindex="-1">4.包管理工具 <a class="header-anchor" href="#_4-包管理工具" aria-label="Permalink to &quot;4.包管理工具&quot;">​</a></h1><h2 id="_4-1-npm-的配置文件" tabindex="-1">4.1.npm 的配置文件 <a class="header-anchor" href="#_4-1-npm-的配置文件" aria-label="Permalink to &quot;4.1.npm 的配置文件&quot;">​</a></h2><ul><li><strong>package.json 文件</strong></li></ul><p><strong>常见的创建方式</strong></p><ul><li><strong>方式一</strong>：<code>手动添加</code><ul><li>npm init <ul><li>需要手动填写信息</li></ul></li><li>nmp init -y <ul><li>使用默认的信息</li></ul></li></ul></li><li><strong>方式二</strong>：<code>通过脚手架创建项目</code><ul><li>脚手架会自动生成 package.json，并且配置相关的信息</li></ul></li></ul><h3 id="_4-1-1package-json-常见的属性" tabindex="-1">4.1.1package.json 常见的属性 <a class="header-anchor" href="#_4-1-1package-json-常见的属性" aria-label="Permalink to &quot;4.1.1package.json 常见的属性&quot;">​</a></h3><p><strong>基本属性</strong></p><ul><li><code>name</code>：项目的名称，（必填）</li><li><code>version</code>：当前项目的版本号，（必填）</li><li><code>description</code>：描述信息，大多时候作为项目的基本描述</li><li><code>author</code>：作者相关信息(发布时用到)</li><li><code>license</code>：开源协议(发布时用到)</li></ul><p><strong>private 属性</strong></p><ul><li><code>private</code>属性记录当前的项目<code>是否是私有</code>的 <ul><li>当值为<code>true</code>，npm 是<code>不能发布他的</code>，为了防止私有项目或模块发布出去的方式</li></ul></li></ul><p><strong>main 属性</strong></p><ul><li><code>main</code>：设置<code>程序的入口</code><ul><li>当引入模块的时候，只写文件夹，默认情况下会去这个文件夹下找 index 相关的文件</li><li>使用<code>main属性来配置入口</code>，那么就会找 main 配置的相关文件</li></ul></li></ul><p><strong>scripts 属性</strong></p><ul><li><p><code>scripts</code>：用于配置一些脚本命令，以键值对的形式存在</p></li><li><p>配置后可以通过<code>npm run 命令的key</code>来执行这个命令</p></li><li><p><code>npm start</code> 和 <code>npm run start</code>的区别</p><ul><li>他们是等价的</li><li>对于常用的 start、test、stop、restart 可以<code>省略掉run</code>，直接通过 npm start 等方式运行</li></ul></li><li><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node ./main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack ...&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p><strong>dependencies 属性</strong></p><ul><li><code>dependencies</code>：指定无论开发环境还是生产环境都需要依赖的包</li></ul><p><strong>devDenpendencies 属性</strong></p><ul><li><code>devDenpendencies</code>: 开发环境需要的依赖包</li><li>npm install --save-dev</li></ul><p><strong>peerDependencies</strong></p><ul><li><code>peerDependencies</code>：表示<code>对等依赖</code>，也就是<code>一个依赖包，它必须是以另一个宿主包为前提的</code><ul><li>比如 element-plus 依赖 vue3 的，那么 element-plus 的 packages.json 中就有<code>peerDependencies：vue3</code>,这样的字段，当使用 element-plus 的时候，如果当前项目没有 vue 就会提示用户这个包是依赖 vue 的</li></ul></li></ul><p><strong>engines 属性</strong></p><ul><li><code>engines</code>：用于<code>指定Node和NPM的版本号</code></li><li>在安装的过程中，会先检查对应的引擎版本，如果<code>不符合就会报错</code></li><li>事实上也可以指定所在的操作系统“os”:[&#39;linux&#39;],只是很少用到</li></ul><p><strong>browserslist 属性</strong></p><ul><li>用于配置打包后的 JavaScript 浏览器的兼容情况</li><li>也可以单独在一个.browserslistrc 文件中进行配置</li></ul><h3 id="_4-1-2-依赖的版本管理" tabindex="-1">4.1.2.依赖的版本管理 <a class="header-anchor" href="#_4-1-2-依赖的版本管理" aria-label="Permalink to &quot;4.1.2.依赖的版本管理&quot;">​</a></h3><ul><li>安装依赖的时候会出现:<code>^2.0.3</code>或<code>~2.0.3</code></li><li>npm 的包通常会遵从<code>semver</code>版本规范</li><li>semver 版本规范是 X.Y.Z <ul><li><strong>X：主版本号(major)</strong><ul><li>当你做了不兼容的 API 修改(可能不兼容之前的版本，比如 vue3 不兼容 vue2 的 eventbus)</li></ul></li><li><strong>Y：次版本号(minor)</strong><ul><li>当你做了向下兼容的功能性新增(新功能增加，但是兼容之前的版本)</li></ul></li><li><strong>Z：修订号(patch)</strong><ul><li>当你做了向下兼容的问题修正(没有新功能，修复了之前版本的 bug)</li></ul></li></ul></li><li><code>^</code>和<code>~</code>的区别 <ul><li><code>x.y.z</code>：表示一个明确的版本号</li><li><code>^x.y.z</code>：表示 x 保持不变，y 和 z 永远安装最新的版本 <ul><li>下次<code>nmp install</code>的时候如果有更新，就会使用新的版本</li></ul></li><li><code>~x.y.z</code>：表示 x 和 y 保持不变的，z 永远安装最新的版本 <ul><li>下次<code>nmp install</code>的时候如果有更新，就会使用新的版本</li></ul></li></ul></li></ul><h3 id="_4-1-3-npm-install-原理" tabindex="-1">4.1.3.npm install 原理 <a class="header-anchor" href="#_4-1-3-npm-install-原理" aria-label="Permalink to &quot;4.1.3.npm install 原理&quot;">​</a></h3><p><img src="https://img-blog.csdnimg.cn/4a2d459ea4f340578d84b6d86bb75adc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Y2W6I-c55qE5bCP55m9,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p><h3 id="_4-1-4-npm-其他命令" tabindex="-1">4.1.4.npm 其他命令 <a class="header-anchor" href="#_4-1-4-npm-其他命令" aria-label="Permalink to &quot;4.1.4.npm 其他命令&quot;">​</a></h3><ul><li>卸载某个依赖包 <ul><li>npm uninstall package</li><li>npm uninstall package --save-dev</li><li>npm uninstall package -D</li></ul></li><li>强制重新 build <ul><li>npm rebuild</li></ul></li><li>清除缓存 <ul><li>npm cache clean</li></ul></li><li>查看缓存的 位置 <ul><li>npm config get cache</li></ul></li></ul><h2 id="_4-2-npx-工具" tabindex="-1">4.2.npx 工具 <a class="header-anchor" href="#_4-2-npx-工具" aria-label="Permalink to &quot;4.2.npx 工具&quot;">​</a></h2><ul><li><p>npx 是 npm5.2 之后自带的一个命令</p><ul><li>npx 的作用非常多，但是比较常见的是使<code>用它来调用某个模块的指令</code></li></ul></li><li><p>举例（以 webpack 为例）</p><ul><li>在终端输入命令，默认会在当前的目录下查找可执行文件，但是不会去当前目录的子目录中查找</li><li>当我们在当前文件夹下输入 webpack 它会先去当前目录下查找，如果没有，再去全局查找，如果没有就会报错</li><li>怎么解决呢(<code>局部查找方式一</code>)？node_modules 文件夹下有一个.bin 文件夹里面存放的有所有包的可执行文件，我们进入到这个.bin 文件夹下打开终端然后输入 webpack 即可执行局部的 webpack</li><li><code>npx的作用就是优先去当前文件夹的node_modules的.bin文件下查找</code><ul><li>当 输入 npx webpack，会先去当前目录的 node_modules 的.bin 文件夹下查找 webpack 可执行文件</li></ul></li></ul></li><li><p>如果在 package.json 中的 scripts 中是不用写 npx 的，因为这个里面默认就会去.bin 文件夹下查找（<code>局部查找方式二</code>）</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="_4-3-pnpm" tabindex="-1">4.3.pnpm <a class="header-anchor" href="#_4-3-pnpm" aria-label="Permalink to &quot;4.3.pnpm&quot;">​</a></h2><h3 id="_4-3-1-原来包管理工具的痛点" tabindex="-1">4.3.1.原来包管理工具的痛点 <a class="header-anchor" href="#_4-3-1-原来包管理工具的痛点" aria-label="Permalink to &quot;4.3.1.原来包管理工具的痛点&quot;">​</a></h3><ul><li>像 npm、yarn、cnpm 这些包管理工具都一个最大的缺点</li><li>如果你电脑有 3 个项目，每个项目都要 axios、vue、webpack 等等这些三方包</li><li>那么每一个项目都会下载一份的，如果你有 10 个 100 个项目呢，</li><li>那么<code>电脑的内存会随着项目的增加而减少</code></li><li><code>pnpm解决了这一痛点</code></li></ul><h3 id="_4-3-2-定义" tabindex="-1">4.3.2.定义 <a class="header-anchor" href="#_4-3-2-定义" aria-label="Permalink to &quot;4.3.2.定义&quot;">​</a></h3><ul><li>pnpm：<code>performant npm</code>的缩写</li><li>速度快、节省磁盘空间的软件包管理器</li></ul><h3 id="_4-3-3-硬链接和软链接" tabindex="-1">4.3.3.硬链接和软链接 <a class="header-anchor" href="#_4-3-3-硬链接和软链接" aria-label="Permalink to &quot;4.3.3.硬链接和软链接&quot;">​</a></h3><p><strong>知识储备</strong></p><ul><li>存放在磁盘的数据是<code>物理数据我们无法去操作</code></li><li>这时候要用到操作系统去操作，操作系统会将磁盘的数据抽象成一个文件的形式让我们去访问操作</li></ul><p><strong>维基百科定义</strong></p><ul><li><strong>硬链接(hard link)</strong><ul><li>是<code>电脑文件系统中多个文件平等的共享同一个存储单元</code></li><li>删除一个文件名字后，还可以用其他名字继续访问该文件</li></ul></li><li><strong>符号链接(软链接 soft link)：</strong><ul><li>是<code>一类特殊的文件</code></li><li>包<code>含一条以绝对路径或相对路径的形式指向其他文件或者目录的引用</code></li></ul></li></ul><p><strong>举例</strong></p><ul><li><strong>硬链接</strong><ul><li>有一个 mp4 文件存放在物理磁盘中，操作系统在 F 盘有个 a.mp4,这个 a.mp4 指向物理磁盘的那个 MP4 文件，那么这中指向关系就是<code>硬链接</code></li><li>在 C 盘中有一个 b.mp4 也指向物理磁盘的 MP4 文件，这种指向也是<code>硬链接</code></li><li>所以即使删除 b.mp4 文件，a.mp4 也依然能够访问磁盘的 MP4 文件</li></ul></li><li><strong>软链接</strong><ul><li>在桌面创建了 a.mp4 的快捷方式，那么这个快捷方式存放的是 a.mp4 的相对绝对路径</li><li>这个快捷方式和 a.mp4 这种指向就是<code>软链接</code></li><li><code>软链接的文件是不可编辑的</code></li></ul></li><li><strong>演示</strong>(<code>widnow 的cmd进行操作</code>) <ul><li><strong>文件拷贝</strong>：会在硬盘中复制一根新的文件数据 <ul><li>copy 原文件 新文件</li><li>copy a.js a_copy.js</li></ul></li><li><strong>文件的硬链接</strong><ul><li><code>mklink /H 新文件 原文件</code></li><li>mklink /H a_hardlink.js a.js</li></ul></li><li><strong>文件的软链接</strong><ul><li><code>mklink 新文件 原文件</code></li><li>mklink a_soft.js a.js</li></ul></li></ul></li></ul><h3 id="_4-3-4-pnpm-原理" tabindex="-1">4.3.4.pnpm 原理 <a class="header-anchor" href="#_4-3-4-pnpm-原理" aria-label="Permalink to &quot;4.3.4.pnpm 原理&quot;">​</a></h3><ul><li><p>使用<code>pnpm安装依赖</code>，依赖包将被<code>存放在一个统一的位置</code>，因此</p><ul><li>如果多个项目对<code>同一个依赖的版本相同</code>，那么磁盘上<code>只有一份这个依赖包</code></li><li>如果多个项目对<code>同一个依赖是不同版本</code>，那么版本之间<code>不同的文件就会被存储起来</code></li><li><code>使用pnpm安装的依赖，所有文件都保存在硬盘上的统一位置</code><ul><li>当安装软件包时，其包含的所有文件<code>都会硬链接到此位置</code>，为不会占用额外的磁盘空间</li><li>这可以让项目之间方便的共享相同版本的依赖包</li></ul></li></ul></li><li><p><strong>举了栗子</strong></p><ul><li>pnpm add axios</li><li>在当前文件的 node_modules 可以看到 axios 文件夹和.pnpm 文件夹</li><li>axios 文件夹是一个软链接，他的地址就是.pnpm 里面的 axios 文件夹(这个文件夹是硬链接，指向磁盘上的数据)</li></ul></li></ul><h3 id="_4-3-5-pnpm-常见命令" tabindex="-1">4.3.5.pnpm 常见命令 <a class="header-anchor" href="#_4-3-5-pnpm-常见命令" aria-label="Permalink to &quot;4.3.5.pnpm 常见命令&quot;">​</a></h3><ul><li>pnpm install</li><li>pnpm add &lt;pkg&gt;</li><li>pnpm remove &lt;pkg&gt;</li><li>pnpm &lt;cmd&gt;</li><li><strong>pnpm store path</strong><ul><li>查找当前电脑 pnpm 的仓库在哪里</li></ul></li><li><strong>pnpm store prune</strong><ul><li>从 store 中<code>删除当前未被引入的包</code>来释放 store 的空间</li></ul></li></ul><h1 id="_5-node-内置模块" tabindex="-1">5.Node 内置模块 <a class="header-anchor" href="#_5-node-内置模块" aria-label="Permalink to &quot;5.Node 内置模块&quot;">​</a></h1><h2 id="_5-1path-模块" tabindex="-1">5.1path 模块 <a class="header-anchor" href="#_5-1path-模块" aria-label="Permalink to &quot;5.1path 模块&quot;">​</a></h2><ul><li>path 模块用于<code>对路径和文件进行处理</code></li><li>在 Mac OS、Linux 和 window 上的路径分隔符是不一样的</li><li>path 会根据不同操作系统返回分隔符</li></ul><h3 id="_5-1-1-常见的-pai" tabindex="-1">5.1.1.常见的 PAI <a class="header-anchor" href="#_5-1-1-常见的-pai" aria-label="Permalink to &quot;5.1.1.常见的 PAI&quot;">​</a></h3><p><strong>从路径中获取信息</strong></p><ul><li>dirname：获取文件夹的父文件夹</li><li>basename：获取文件名</li><li>extname：获取文件拓展名</li></ul><p><strong>路径拼接</strong></p><ul><li>path.join</li><li>如果希望将多个路径进行拼接，但是不同 的操作系统可能使用的是不同的分隔符，可以使用 path.join</li></ul><p><strong>拼接绝对路径</strong></p><ul><li>path.resolve</li><li>该方法会把一个路径或路径片段的序列(传入的路径参数)解析成一个绝对路径</li><li>给定的路径序列是从右往左被处理的，后面每个 path 被依次解析，<code>直到构造完成一个绝对路径</code>，就停止解析</li><li>如果在处理完所有给定 path 之后，还没有生产绝对路径，则使用当前工作目录</li><li>生成的路径被规范化并删除尾部斜杠，零长度的 path 将被忽略</li><li>如果没有 path 传入(无参数),path.resolve()将返回当前工作目录的绝对路径</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./cba/nbc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path2, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cba\\text</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// / 表示根目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path1, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, path2);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// C:\\aaa\\cba\\nbc</span></span></code></pre></div><h1 id="_6-webpack-basic" tabindex="-1">6.webpack_basic <a class="header-anchor" href="#_6-webpack-basic" aria-label="Permalink to &quot;6.webpack_basic&quot;">​</a></h1><h2 id="_6-1-定义" tabindex="-1">6.1.定义 <a class="header-anchor" href="#_6-1-定义" aria-label="Permalink to &quot;6.1.定义&quot;">​</a></h2><ul><li>webpack 是一个静态的模块化打包工具，为现代的 JavaScript 应用程序</li><li>官方解释 <ul><li>webpack is a <code>static module bundler</code> for <code>modern</code> JavaScript applications</li></ul></li><li><code>打包bundler</code>：webpack 可以进行打包，所以是一个打包工具</li><li><code>静态的static</code>：webpack 最终可以将代码打包成静态资源</li><li><code>模块化module</code>：webpack 默认支持各种模块化开发</li><li><code>现代的modern</code>：现在的开发模式才需要打包</li></ul><h2 id="_6-2-安装" tabindex="-1">6.2.安装 <a class="header-anchor" href="#_6-2-安装" aria-label="Permalink to &quot;6.2.安装&quot;">​</a></h2><ul><li>webpack 的安装目前分为：<code>webpack、webpack-cli</code></li><li><strong>两者的关系</strong><ul><li><code>执行webpack命令</code>，会执行 node_modules 下的.bin<code>目录下的webpack</code></li><li>webpack 在执行时是依赖 webpack-cli 的，如果没有安装就会报错</li><li>而<code>webpack-cli中代码执行时</code>，才是<code>真正利用webpack</code>进行编译和打包的过程</li><li>所以在安装 webpack 时，需要同时安装 webpack-cli（第三方框架事实上没有用 webpack-cli 的，用的类似于自己的 vue-cervice-cli 的东西）</li></ul></li></ul><h2 id="_6-3-常见指令" tabindex="-1">6.3.常见指令 <a class="header-anchor" href="#_6-3-常见指令" aria-label="Permalink to &quot;6.3.常见指令&quot;">​</a></h2><p><strong>指定配置文件</strong></p><ul><li>默认情况下 webpack 的配置文件是<code>webpack.config.js</code></li><li>如果想<code>换成其他的</code>，就这终端输入<code>webpack --config 自定义名称</code><ul><li>webpack --config a.js</li></ul></li></ul><h2 id="_6-4-loader" tabindex="-1">6.4.loader <a class="header-anchor" href="#_6-4-loader" aria-label="Permalink to &quot;6.4.loader&quot;">​</a></h2><h3 id="_6-4-1-loader-配置方式" tabindex="-1">6.4.1.loader 配置方式 <a class="header-anchor" href="#_6-4-1-loader-配置方式" aria-label="Permalink to &quot;6.4.1.loader 配置方式&quot;">​</a></h3><ul><li><code>module.rules</code>中允许我们配置多个 loader</li></ul><p><strong>module.rules 配置</strong></p><ul><li>rules 属性对应的值是一个<code>数组</code>: <strong>[Rule]</strong></li><li>数组中存放的是一个个 Rule，<code>Rule是一个对象</code>，对象中可以设置多个属性 <ul><li><code>test属性</code>：用于对 resource(资源)进行匹配，通常会设置成<code>正则表达式</code></li><li><code>use属性</code>：对应的值是一个数组[UseEntry] <ul><li>UseEntry 是一个对象，可以通过对对象的属性来设置一些其他属性 <ul><li>loader:必须有一个 loader 属性，对应的是一个字符串</li><li>options：可先的属性，值是一个字符串或对象，会被传入到 loader 中</li><li>query:目前已经使用 options 来代替</li></ul></li><li>userEntry 是一个字符串：是 loader 的一种简写</li></ul></li><li><code>loader属性</code>：如果只有一个 loader 时候，可以使用这个属性简写</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/main.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 告诉webpack匹配什么样的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 详细写法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // use: [{ loader: &quot;style-loader&quot; }, { loader: &quot;css-loader&quot; }],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 简写一：只有一个loader的情况</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // loader: &quot;css-loader&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 简写二:多个loader不需要其他属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_6-4-2-css-loader" tabindex="-1">6.4.2.css-loader <a class="header-anchor" href="#_6-4-2-css-loader" aria-label="Permalink to &quot;6.4.2.css-loader&quot;">​</a></h3><h3 id="_6-4-3-style-loader" tabindex="-1">6.4.3.style-loader <a class="header-anchor" href="#_6-4-3-style-loader" aria-label="Permalink to &quot;6.4.3.style-loader&quot;">​</a></h3><h3 id="_6-4-4-less-loader" tabindex="-1">6.4.4.less-loader <a class="header-anchor" href="#_6-4-4-less-loader" aria-label="Permalink to &quot;6.4.4.less-loader&quot;">​</a></h3><h2 id="_6-5-postcss-工具" tabindex="-1">6.5.postcss 工具 <a class="header-anchor" href="#_6-5-postcss-工具" aria-label="Permalink to &quot;6.5.postcss 工具&quot;">​</a></h2><p><strong>作用</strong></p><ul><li>PostCSS 是一个通过 Javascript 来转换样式的工具</li><li>这个工具可以进行一些<code>CSS的转换和适配</code>，比如自动添加浏览器前缀、css 样式的重置</li><li>实现这些功能需要<code>借助PostCSS对应的插件</code></li></ul><p><strong>使用</strong></p><ul><li>第一步：查找 PostCSS 在构建工具中的扩展，比如 webpack 中的 postcss-loader；</li><li>第二步：选择可以添加你需要的 PostCSS 相关的插件；</li></ul><p><strong>安装</strong></p><p><code>npm install postcss-loader -D</code></p><h3 id="_6-5-1-使用-postcss-里面的插件" tabindex="-1">6.5.1.使用 postcss 里面的插件 <a class="header-anchor" href="#_6-5-1-使用-postcss-里面的插件" aria-label="Permalink to &quot;6.5.1.使用 postcss 里面的插件&quot;">​</a></h3><h4 id="autoprefixer" tabindex="-1"><strong>autoprefixer</strong> <a class="header-anchor" href="#autoprefixer" aria-label="Permalink to &quot;**autoprefixer**&quot;">​</a></h4><ul><li>autoprefixer 是给需要添加 css 前缀的属性添加前缀</li><li>需要下载 npm install autoprefixer -D</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">less</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            use: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;style-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;css-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;less-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postcss-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        postcssOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            plugins: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;autoprefixer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><ul><li>上面的配置让页面显得太复杂了</li><li>可以使用一个<code>postcss.config.js</code>文件</li></ul><p><strong>postcss.config.js</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;autoprefixer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>webpack.config.js</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">less</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            use: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;style-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;css-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;less-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;postcss-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><h4 id="postcss-preset-env" tabindex="-1">postcss-preset-env <a class="header-anchor" href="#postcss-preset-env" aria-label="Permalink to &quot;postcss-preset-env&quot;">​</a></h4><ul><li>事实上，在配置 postcss-loader 时，并不需要 autoprefixer 插件</li><li>可以使用<code>postcss-preset-env</code>插件</li><li>这个插件可以自动将一些<code>现代的CSS特性</code>，<code>转换成大多数浏览器认识的CSS</code>，并且会根据目标浏览器或者运行时环境添加所需的 polyfill</li><li>也包括自动帮助我们添加 autoprefixer(相当于内置了 autoprefixer 插件)</li></ul><p>postcss.config.js：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;postcss-preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_6-6-asset-module-type" tabindex="-1">6.6.asset module type <a class="header-anchor" href="#_6-6-asset-module-type" aria-label="Permalink to &quot;6.6.asset module type&quot;">​</a></h2><ul><li>webpack5 之前加载类似图片资源、文字资源需要用对应的 loader 进行处理，webpack5 内置了这些 loader，只需要设置对应的 type 即可</li><li>资源模块类型 <ul><li><code>asset/resource</code>：生成一个单独的文件并导出 URL <ul><li>之前通过使用 file-loader 使用</li></ul></li><li><code>asset/inline</code>：导出一个资源的 data URI <ul><li>base64 格式</li><li>之前通过使用 url-loader 实现</li></ul></li><li><code>asset/source</code>：导出资源的源代码 <ul><li>拿到文件的二进制代码</li><li>之前通过 raw-loader 实现</li></ul></li><li><code>asset</code>：在 asset/inline 和 asset/resource 之间自动选择 <ul><li>之前通过 url-loader，并配置资源体积实现</li></ul></li></ul></li></ul><h3 id="_6-6-1-根据图片大小设置不同资源类型" tabindex="-1">6.6.1.<strong>根据图片大小设置不同资源类型</strong> <a class="header-anchor" href="#_6-6-1-根据图片大小设置不同资源类型" aria-label="Permalink to &quot;6.6.1.**根据图片大小设置不同资源类型**&quot;">​</a></h3><ul><li>开发中我们往往希望小点的照片使用 base64 格式，大点的照片生成一个单独的文件</li><li>只需要两步 <ol><li>将 type 设置为 asset</li><li>添加一个 parser 属性，并且制定 dataUrl 的条件，添加 maxSize 属性</li></ol></li><li>如果<code>大于maxSize</code>的文件将会使用<code>asset/resource</code>类型，反之使用<code>asset/inline</code>类型</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(jpe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">svg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">gif)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // type: &quot;asset/resource&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // type: &quot;asset/inline&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // type: &quot;asset/source&quot;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            parser: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                dataUrlCondition: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    maxSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_6-6-2-生成自定义的文件名" tabindex="-1">6.6.2.生成自定义的文件名 <a class="header-anchor" href="#_6-6-2-生成自定义的文件名" aria-label="Permalink to &quot;6.6.2.生成自定义的文件名&quot;">​</a></h3><ul><li>可以在 output 的 assetFilename 中设置</li><li>也可以在<code>匹配对应规则之后设置(常用)</code><ul><li>在<code>generator</code>属性中指定</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(jpe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">svg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">gif)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // type: &quot;asset/resource&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // type: &quot;asset/inline&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // type: &quot;asset/source&quot;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            parser: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                dataUrlCondition: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    maxSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            generator: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 占位符</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // name:指向原文件的名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ext：拓展名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // hash：webpack生成的hash值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // [hash:8]:指定截取hash的数量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 还可以指定一个文件夹 在文件前面加文件夹名称即可</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;images/[name]_[hash:8][ext]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_6-7-babel-工具" tabindex="-1">6.7.babel 工具 <a class="header-anchor" href="#_6-7-babel-工具" aria-label="Permalink to &quot;6.7.babel 工具&quot;">​</a></h2><ul><li>Babel 是一个工具链，主要用于旧浏览器或者环境中将 ECMAScript 2015+代码转换为向后兼容版本的 JavaScript；</li><li>包括：语法转换、源代码转换等；</li></ul><h3 id="使用-babel-中的插件" tabindex="-1">使用 babel 中的插件 <a class="header-anchor" href="#使用-babel-中的插件" aria-label="Permalink to &quot;使用 babel 中的插件&quot;">​</a></h3><ul><li>单独设置 babel-loader 是不会将箭头函数、const 这些转成 es5 的代码的，需要使用插件进行配置</li><li>这里使用 Babel 的预设插件 <ul><li>这个插件内置了很多常用的插件</li></ul></li></ul><p><strong>安装</strong></p><p><code>npm install @babel/preset-env -D</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            use: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;babel-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        plugins: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@babel/plugin-transform-arrow-functions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p>上面的配置还可以抽成一个单独的配置文件<code>babel.config.js</code></p></li><li><p>如果是预设，那么要添加在<code>presets</code>属性中</p></li><li><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // plugins: [&quot;@babel/plugin-transform-arrow-functions&quot;],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  presets: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ul><p><strong>常见的预设</strong></p><ul><li>env：将 es6 转为 es5</li><li>react</li><li>TypeScript</li></ul><h2 id="_6-8-resolve-模块" tabindex="-1">6.8.resolve 模块 <a class="header-anchor" href="#_6-8-resolve-模块" aria-label="Permalink to &quot;6.8.resolve 模块&quot;">​</a></h2><ul><li>resolve 用于设置模块如何解析 <ul><li>在开发中会有各种各样的模块依赖</li><li>resolve 可以帮助 webpack 从每个 require/import 语句中，找到需要引入到合适的模块代码</li></ul></li></ul><p><strong>webpack 能解析三种文件路径</strong></p><ul><li>绝对路径 <ul><li>给出了绝对路径，因此不需要在做进一步的解析</li></ul></li><li>相对路径 <ul><li>使用 import 或 require 的资源文件所处的目录，被认为是上下文目录</li><li>在 import/require 中给定的相对路径，会拼接此上下文路径，来生成模块的绝对路径</li></ul></li><li>模块路径 <ul><li>在 resolve.modules 中指定的所有目录检索 <ul><li>默认值是<code>[&#39;node_modules&#39;]</code>，所以默认会从 node_modules 中查找文件</li></ul></li></ul></li></ul><p><strong>确定文件还是文件夹</strong></p><ul><li><p>如果是一个文件</p></li><li><p>如果文件具有拓展名，则直接打包</p></li><li><p>否则，将使用 resolve.extensions 选项作为文件拓展名解析</p></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extensions: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><p>如果是一个文件夹</p><ul><li>会在文件夹中根据 resolve.mainFiles<code>配置选项中指定的文件顺序查找</code><ul><li>resolve.mainFiles 的默认值是[&#39;index&#39;]</li><li>再根据 resolve.extensions 来解析拓展名</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainFiles: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="alias" tabindex="-1"><strong>alias</strong> <a class="header-anchor" href="#alias" aria-label="Permalink to &quot;**alias**&quot;">​</a></h3><ul><li>起别名</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainFiles: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    alias: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;@&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_6-9-webpack-常见的插件-plugin" tabindex="-1">6.9.webpack 常见的插件(plugin) <a class="header-anchor" href="#_6-9-webpack-常见的插件-plugin" aria-label="Permalink to &quot;6.9.webpack 常见的插件(plugin)&quot;">​</a></h2><h3 id="_6-9-1-认识-plugin" tabindex="-1">6.9.1.认识 plugin <a class="header-anchor" href="#_6-9-1-认识-plugin" aria-label="Permalink to &quot;6.9.1.认识 plugin&quot;">​</a></h3><ul><li>Loader 是<code>用于特定的模块类型</code>进行转换</li><li>Plugin 可以用于<code>执行更加广泛的任务</code>，比如打包优化、资源管理、环境注入等</li></ul><h3 id="_6-9-2-cleanwebpackplugin" tabindex="-1">6.9.2.CleanWebpackPlugin <a class="header-anchor" href="#_6-9-2-cleanwebpackplugin" aria-label="Permalink to &quot;6.9.2.CleanWebpackPlugin&quot;">​</a></h3><ul><li>每次打包之后将之前的打包文件夹删除</li></ul><p><strong>安装</strong></p><p>npm install clean-webpack-plugin -D</p><p><strong>配置文件</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CleanWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clean-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundle.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    module: {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CleanWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_6-9-3-htmlwebpackplugin" tabindex="-1">6.9.3.HtmlWebpackPlugin <a class="header-anchor" href="#_6-9-3-htmlwebpackplugin" aria-label="Permalink to &quot;6.9.3.HtmlWebpackPlugin&quot;">​</a></h3><ul><li>生成一个 html 文件</li></ul><p><strong>安装</strong></p><p>npm install html-webpack-plugin -D</p><p><strong>配置</strong></p><ul><li>自定义模板数据填充 <ul><li>title：生成 html 的 title 属性</li><li>template：按照模板生成 html 文件</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;html-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundle.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    module: {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HtmlWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我是大帅逼&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_6-9-4-definedplugin" tabindex="-1">6.9.4.DefinedPlugin <a class="header-anchor" href="#_6-9-4-definedplugin" aria-label="Permalink to &quot;6.9.4.DefinedPlugin&quot;">​</a></h3><ul><li>DefinedPlugin<code>允许在编译时创建配置的全局常量</code></li><li>是一个 webpack 的<code>内置插件</code>，无需安装</li></ul><p><strong>配置</strong></p><ul><li><p>注意：配置的值在解析的时候<code>会当成代码解析</code>，所以要<code>加引号</code>让他变成字符串</p></li><li><p>默认注入的全局变量</p><ul><li><code>process.env.NODE_ENV</code>：判断当前的开发环境</li></ul></li><li><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DefinePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundle.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    module: {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefinePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    named: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;Jack&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ul><h2 id="_6-10-mode-配置" tabindex="-1">6.10.Mode 配置 <a class="header-anchor" href="#_6-10-mode-配置" aria-label="Permalink to &quot;6.10.Mode 配置&quot;">​</a></h2><ul><li>可以告知 webpack<code>使用相应的内置优化</code><ul><li>默认值是<code>production</code></li><li>可选值有：&#39;none&#39; | &#39;development&#39; | &#39;production&#39;</li></ul></li></ul><h2 id="_6-11-devserver" tabindex="-1">6.11.devServer <a class="header-anchor" href="#_6-11-devserver" aria-label="Permalink to &quot;6.11.devServer&quot;">​</a></h2><ul><li>监听代码变化，自动编译并且刷新浏览器</li><li>webpack-dev-server 在编译之后<code>不会生成文件到文件夹中</code>，而是启动一个本地服务，将编译好的代码放入到本地服务中，浏览器在过来请求拿到文件</li></ul><p><strong>安装</strong></p><p><code>npm install webpack-dev-server -D</code></p><p><strong>命令</strong></p><p><code>webpack serve</code></p><h3 id="_6-11-1-热模块替换-hmr" tabindex="-1">6.11.1.热模块替换(HMR) <a class="header-anchor" href="#_6-11-1-热模块替换-hmr" aria-label="Permalink to &quot;6.11.1.热模块替换(HMR)&quot;">​</a></h3><h4 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h4><ul><li>HMR 的全称是<code>Hot Module Replacement</code></li><li>模块热替换是指在 <code>应用程序运行过程中</code>，<code>替换、添加、删除模块</code>，而<code>无需刷新整个页面</code></li></ul><p><strong>优点</strong></p><ul><li>不重新加载整个页面，这样可以保留某些应用程序的状态不丢失</li><li>只更新需要变化的内容，节省开发时间</li><li>修改了 css、js 源码，会立即在浏览器更新</li></ul><p><strong>使用</strong></p><ul><li>默认情况下，webpack-dev-server 已经支持 HMR，只需要开启即可(<code>默认开启</code>)</li><li>在不启用 HMR 的情况下，当修改了源代码之后，整个页面会自动刷新，使用的是 live reloading</li></ul><p>修改 webpack 配置</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hot: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>指定哪些模块需要热更新</strong></p><ul><li>注意：如果入口文件发生了变化，还是会刷新整个网页的</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./utils/demo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mian.js is changed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span></code></pre></div><ul><li>在<code>框架中</code>，框架已经对每个组件开启了 HMR，所以<code>不用手动设置</code></li></ul><h3 id="_6-11-2-devserver-配置" tabindex="-1">6.11.2.devServer 配置 <a class="header-anchor" href="#_6-11-2-devserver-配置" aria-label="Permalink to &quot;6.11.2.devServer 配置&quot;">​</a></h3><p><strong>port</strong></p><ul><li>设置端口号</li></ul><p><strong>host</strong></p><ul><li>配置主机</li><li>设置成：<code>local-ipv4</code><ul><li>监听 IPV4 上所有的地址，在根据端口找到不同的应用程序</li></ul></li></ul><p><strong>open</strong></p><ul><li>是否打开浏览器</li></ul><p><strong>compress</strong></p><ul><li>是否为打包后的代码压缩 gzip compression</li><li>默认值是<code>true</code></li></ul><h1 id="_7-git" tabindex="-1">7.git <a class="header-anchor" href="#_7-git" aria-label="Permalink to &quot;7.git&quot;">​</a></h1><h2 id="_7-1-用户名和邮箱配置" tabindex="-1">7.1.用户名和邮箱配置 <a class="header-anchor" href="#_7-1-用户名和邮箱配置" aria-label="Permalink to &quot;7.1.用户名和邮箱配置&quot;">​</a></h2><p><strong>命令</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git config --global user.name  &quot;名称&quot;</span></span>
<span class="line"><span>git config --global user.email  &quot;邮箱&quot;</span></span></code></pre></div><h2 id="_7-2-文件的状态" tabindex="-1">7.2.文件的状态 <a class="header-anchor" href="#_7-2-文件的状态" aria-label="Permalink to &quot;7.2.文件的状态&quot;">​</a></h2><ul><li><code>未跟踪(Untracked)</code>：默认情况下，git 仓库下的文件没有添加到 git 仓库中，需要通过 add 命令来操作</li><li><code>已跟踪(tracked)</code>：添加到 Git 仓库的文件处于已跟踪状态，git 可以对其进行各种跟踪管理</li></ul><p><strong>已跟踪文件状态</strong></p><ul><li><code>staged（暂缓）</code>：暂缓区的文件状态</li><li><code>Unmodified（未修改）</code>：commit 命令，可以将 staged 中的文件提交到 Git 仓库</li><li><code>Modified（修改）</code>：修改某个文件后，会处于 Modified 状态</li></ul><h2 id="_7-3-git-相关命令" tabindex="-1">7.3.git 相关命令 <a class="header-anchor" href="#_7-3-git-相关命令" aria-label="Permalink to &quot;7.3.git 相关命令&quot;">​</a></h2><p><strong>查看状态</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git status  // 查看文件的状态</span></span>
<span class="line"><span>git status -s // 查看文件的状态(简洁显示)</span></span>
<span class="line"><span>git status --short // 查看文件的状态(简洁显示)</span></span></code></pre></div><p>暂存</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git add .  // 暂存全部文件</span></span>
<span class="line"><span>git add 文件名  // 暂存某个文件</span></span></code></pre></div><p><strong>提交</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git commit -m &#39;message&#39;  // 添加到本地仓库</span></span>
<span class="line"><span>git commit -a -m &#39;自定义内容&#39;   // 添加到暂缓去并且提交的本地仓库</span></span></code></pre></div><p><strong>log</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git log  // 查看提交历史 最近的更新排在最上面</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git log --pretty=oneline  // 每行显示一条信息</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git log --pretty=oneline --graph  // 如果有多个分支合并到主分支，此操作可以查看每次提交来自于哪个分支</span></span></code></pre></div><h2 id="_7-4-忽略文件" tabindex="-1">7.4.忽略文件 <a class="header-anchor" href="#_7-4-忽略文件" aria-label="Permalink to &quot;7.4.忽略文件&quot;">​</a></h2><ul><li>创建一个<code>.gitignore</code>文件用于忽略某些不需要提交的文件</li><li>一般不需要自己手动编写，脚手架会自动生成</li></ul><h2 id="_7-5-git-的校验和" tabindex="-1">7.5.git 的校验和 <a class="header-anchor" href="#_7-5-git-的校验和" aria-label="Permalink to &quot;7.5.git 的校验和&quot;">​</a></h2><ul><li>git 中所有的数据在存储前都计算校验和，然后以<code>校验和</code>来引用 <ul><li>git 用以计算校验和的机制叫做 SHA-1 散列(hash)</li><li>这是一个由 40 个十六进制字符(0-9 和 a-f)组成的字符串，基于 git 中文件的内容或目录结构计算出来</li></ul></li><li>每次 commit 的时候都有一个 id 这个 id 就是校验和</li></ul><h2 id="_7-6-版本回退" tabindex="-1">7.6.版本回退 <a class="header-anchor" href="#_7-6-版本回退" aria-label="Permalink to &quot;7.6.版本回退&quot;">​</a></h2><ul><li>如果想要进行版本回退，需要直到目前处于哪个版本：git 通过 HEAD 指针记录当前版本 <ul><li>HEAD 是当前分支引用的指针，他总是指向该分支上的最后一次提交</li><li>可以将<code>HEAD</code>看作是<code>该分支的最后一次提交的快照</code></li></ul></li></ul><p><strong>命令</strong></p><ul><li>上一个版本就是 HEAD^，上上一个版本就是 HEAD^^</li><li>如果上 10 个版本，可以使用 HEAD~10</li><li>也可以指定某一个版本的 commit id</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git reset --hard HEAD^</span></span>
<span class="line"><span>git reset --hard HEAD~10</span></span>
<span class="line"><span>git reset --hard commitID  // commitID 只需要取不同的即可(比如取前8位)</span></span></code></pre></div><p><strong>reflog</strong></p><ul><li>记录了所有的操作</li><li>可以用来撤销回退的版本 <ul><li>拿到回退之前的版本，然后回退过去</li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git reflog</span></span></code></pre></div><h2 id="_7-7-验证方式-ssh-密钥" tabindex="-1">7.7.验证方式-SSH 密钥 <a class="header-anchor" href="#_7-7-验证方式-ssh-密钥" aria-label="Permalink to &quot;7.7.验证方式-SSH 密钥&quot;">​</a></h2><ul><li>Secure Shell(安全外壳协议，简称 SSH)是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境</li><li>SSH 以非对称加密实现身份验证</li></ul><p><strong>生成密钥的命令</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ssh-keygen -t ed25519 -C &#39;邮箱&#39;</span></span></code></pre></div><ul><li>将生成的公钥放到服务器即可</li></ul><h2 id="_7-8-管理远程仓库" tabindex="-1">7.8.管理远程仓库 <a class="header-anchor" href="#_7-8-管理远程仓库" aria-label="Permalink to &quot;7.8.管理远程仓库&quot;">​</a></h2><p><strong>查看远程仓库地址</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git remote</span></span>
<span class="line"><span>git remote -v  // 完整版</span></span></code></pre></div><p><strong>添加远程地址</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git remote add 仓库名 仓库地址</span></span>
<span class="line"><span>eg: git remote add origin http://www.xxx.com</span></span></code></pre></div><p><strong>操作远程仓库</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 重命名远程地址</span></span>
<span class="line"><span>git remote rename  旧名称  新名称</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 移除远程地址</span></span>
<span class="line"><span>git remote remove 仓库名</span></span></code></pre></div><p><strong>操作远程仓库的完整流程(非 clone 的仓库)</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 创建本地仓库</span></span>
<span class="line"><span>git init</span></span>
<span class="line"><span>2. 提交本地代码到本地仓库</span></span>
<span class="line"><span>git add .</span></span>
<span class="line"><span>git  commit -m &#39;xxx&#39;</span></span>
<span class="line"><span>3.远程连接</span></span>
<span class="line"><span>git romote add origin  git@gitee.com:wscymdb/main-process-of-scaffold.git</span></span>
<span class="line"><span>4. 拉取并且合并远程仓库到本地</span></span>
<span class="line"><span>git pull</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>第四步会遇到两个问题：</span></span>
<span class="line"><span>问题一：</span></span>
<span class="line"><span>	原因是git本地仓库要和远程仓库的哪个分支相互链接</span></span>
<span class="line"><span>解决：</span></span>
<span class="line"><span>	git pull &lt;remote&gt; &lt;branch&gt;</span></span>
<span class="line"><span>	git pull origin master</span></span>
<span class="line"><span>但是每次pull的时候都要写后面的太麻烦,所以可以设置上游分支，这样以后就可以直接pull了</span></span>
<span class="line"><span></span></span>
<span class="line"><span>设置上游分支</span></span>
<span class="line"><span>	// git branch --set--upstream-to=origin/&lt;branch&gt; master</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	git branch --set-upstream-to=origin/master master</span></span>
<span class="line"><span></span></span>
<span class="line"><span>问题二：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>报错：fatal: refusing to merge unrelated histories</span></span>
<span class="line"><span></span></span>
<span class="line"><span>原因：</span></span>
<span class="line"><span>	Git2.9版本之后，不允许两个没有共同基础的两个分支相互合并，因为如果本地仓库是一个没有经验或没有规范的提交，那么本地就会有很多提交历史，如果合并到远程仓库，会导致远程仓库也有很多历史提交，显然这些是无用的，所以Git2.9之后就不被允许了</span></span>
<span class="line"><span></span></span>
<span class="line"><span>解决：</span></span>
<span class="line"><span>	添加：–-allow-unrelated-histories</span></span>
<span class="line"><span>	git pull –-allow-unrelated-histories</span></span></code></pre></div><h3 id="_7-8-1-远程仓库的交互" tabindex="-1">7.8.1.远程仓库的交互 <a class="header-anchor" href="#_7-8-1-远程仓库的交互" aria-label="Permalink to &quot;7.8.1.远程仓库的交互&quot;">​</a></h3><p><strong>获取代码</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone &lt;远程仓地址&gt;</span></span></code></pre></div><p><strong>推送</strong></p><ul><li><code>默认情况下是将当前分支(比如master) push到 origin远程仓库的</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push</span></span>
<span class="line"><span>git push origin master</span></span></code></pre></div><ul><li><p><code>注意</code>：</p><ul><li>当使用本地仓库链接远程仓库的时候，如果当前 push 所在的本地仓库和云仓的分支不一样的时候，使用 git push 默认情况下是使用的当 simple，如果云端没有当前本地的分支那么就会报错</li><li>Git2.0 版本之后 push.default 的值是<code>simple</code></li><li>所以设置 push 的默认值为<code>upstream</code>即可</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git config push.default upstream</span></span>
<span class="line"><span></span></span>
<span class="line"><span>push.default的值</span></span>
<span class="line"><span>1.simple(默认)：推送当前分支到远程仓库同名分支，没有同名分支会报错</span></span>
<span class="line"><span>2.current：推送当前分支到远程仓库同名分支，没有同名分支会在远程仓库创建一个同名的分支</span></span>
<span class="line"><span>2.upstream:推送当前分支的上游分支到远程仓库同名的分支</span></span></code></pre></div></li></ul><p><strong>获取最新代码</strong></p><ul><li><code>默认情况下是从origin中获取代码</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git fetch</span></span>
<span class="line"><span>git fetch origin master</span></span></code></pre></div><ul><li><code>获取代码后默认并没有合并到本地仓库，许哟啊通过merge来合并</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git merge</span></span>
<span class="line"><span>git merge origin/master  // 表示将origin仓库的master分支合并到当前分支</span></span></code></pre></div><p><strong>获取并合并</strong></p><ul><li><code>是git fetch和gitmerge的合并写法</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git pull</span></span></code></pre></div><h2 id="_7-9-git-标签" tabindex="-1">7.9.Git 标签 <a class="header-anchor" href="#_7-9-git-标签" aria-label="Permalink to &quot;7.9.Git 标签&quot;">​</a></h2><ul><li>对于重大的版本常常会打上一个标签，以表示他的重要性</li><li>比较由代表性的是人们会使用这个功能来标记发布节点</li></ul><p><strong>创建标签</strong></p><ul><li>Git 支持两种标签：轻量标签(lightweight)和附注标签(annotated)</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>轻量标签</span></span>
<span class="line"><span>git tag v1.0.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>附注标签</span></span>
<span class="line"><span>git tag -a v1.1.1 -m&quot;附注标签描述&quot;</span></span></code></pre></div><p><strong>查看</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git tag</span></span></code></pre></div><p><strong>推送标签到远程仓库</strong></p><ul><li>默认情况下，git push 命令并不会传送标签到远程仓库服务器上</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push origin  v1.0.0 // 推送指定tag</span></span>
<span class="line"><span>git push origin --tags  // 推送全部tag</span></span></code></pre></div><p><strong>删除 tag</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 删除本地tag</span></span>
<span class="line"><span>git tag -d &lt;tagname&gt;</span></span>
<span class="line"><span>// 删除远程tag</span></span>
<span class="line"><span>git push &lt;remote&gt; -delete &lt;tagname&gt;</span></span></code></pre></div><p><strong>检出 tag</strong></p><ul><li>回到某个 tag 的版本</li><li>正常情况下，要是想修改某个 tag 的内容，应该创建当前 tag 的分支，在该分支上进行修改</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout &lt;tagname&gt;</span></span></code></pre></div><h2 id="_7-10-分支" tabindex="-1">7.10.分支 <a class="header-anchor" href="#_7-10-分支" aria-label="Permalink to &quot;7.10.分支&quot;">​</a></h2><p><strong>创建</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>创建分支</span></span>
<span class="line"><span>git branch &lt;branchname&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>创建并切换到该分支</span></span>
<span class="line"><span>git checkout -b &lt;branchname&gt;</span></span></code></pre></div><p><strong>查看</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>查看所有分支</span></span>
<span class="line"><span>git branch</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看所有分支，并查看最后一次提交</span></span>
<span class="line"><span>git branch -v</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看所有合并到当前分支的分支</span></span>
<span class="line"><span>git branch --merged</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看所有没有合并到当前分支的分支</span></span>
<span class="line"><span>git branch --no-merged</span></span></code></pre></div><p><strong>删除</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>删除某个分支</span></span>
<span class="line"><span>git branch -d &lt;branchname&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>强行删除某个分支</span></span>
<span class="line"><span>git branch -D &lt;branchname&gt;</span></span></code></pre></div><h3 id="_7-10-1-git-远程分支" tabindex="-1">7.10.1.Git 远程分支 <a class="header-anchor" href="#_7-10-1-git-远程分支" aria-label="Permalink to &quot;7.10.1.Git 远程分支&quot;">​</a></h3><ul><li>远程分支也是一种分支结构 <ul><li>以&lt;remote&gt;/&lt;branch&gt;的形式命名 <ul><li>origin/master</li></ul></li></ul></li></ul><p><strong>远程分支的管理</strong></p><ul><li><p><strong><code>推送分支到远程</code></strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push &lt;remote&gt; &lt;branch&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>eg:</span></span>
<span class="line"><span>git push origin develop</span></span></code></pre></div></li><li><p><strong><code>跟踪远程分支</code></strong></p><ul><li><p>当克隆一个仓库时，通常会自动地创建一个跟踪 origin/master 的 master 分支</p></li><li><p>也可以手动的设置其他的跟踪分支</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout --track &lt;remote&gt;/&lt;branch&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>简写</span></span>
<span class="line"><span>git checkout &lt;branch&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 1. 查看本地是否有该分支</span></span>
<span class="line"><span>// 2. 查看云仓是否有，有的话就在本地创建一个分支并且跟踪远程的这个分支</span></span></code></pre></div></li></ul></li><li><p><strong><code>删除远程的分支</code></strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push origin -d &lt;remotebranchname&gt;</span></span></code></pre></div></li></ul><h2 id="_7-11-commit-操作相关" tabindex="-1">7.11. commit 操作相关 <a class="header-anchor" href="#_7-11-commit-操作相关" aria-label="Permalink to &quot;7.11. commit 操作相关&quot;">​</a></h2><p><strong>修改你最近一次的 Git commit 信息</strong> 你可以使用以下命令来修改你最近一次的 Git commit 信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --amend</span></span></code></pre></div><p>这将打开你的默认文本编辑器，你可以在其中编辑提交消息。保存并关闭编辑器后，新的提交消息将替换旧的。</p><p>如果你已经推送了这个提交到远程仓库，你需要强制推送更新：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span></span></code></pre></div><p>请注意，强制推送可能会覆盖其他人的工作，所以在团队协作时要谨慎使用。</p><p>如果你需要修改更早的提交，可以使用交互式 rebase：</p><ol><li><p>首先，启动交互式 rebase，指定你想要修改的提交之前的一个提交：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD~n</span></span></code></pre></div><p>其中 <code>n</code> 是你想要回溯的提交数量。</p></li><li><p>在打开的编辑器中，将你想要修改的提交前的 <code>pick</code> 改为 <code>edit</code>。</p></li><li><p>保存并关闭编辑器。Git 会暂停在你指定的提交上。</p></li><li><p>使用 <code>git commit --amend</code> 修改提交信息。</p></li><li><p>使用 <code>git rebase --continue</code> 继续 rebase 过程。</p></li><li><p>最后，强制推送更新：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span></span></code></pre></div></li></ol><p>希望这些步骤能帮到你！如果有其他问题，请随时告诉我。</p>`,330)]))}const g=i(e,[["render",p]]);export{c as __pageData,g as default};
