import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.BFVHecrR.js";const o=JSON.parse('{"title":"1 shell 基础","description":"","frontmatter":{},"headers":[],"relativePath":"linux/shell.md","filePath":"linux/shell.md"}'),t={name:"linux/shell.md"};function p(h,s,e,k,d,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_1-shell-基础" tabindex="-1">1 shell 基础 <a class="header-anchor" href="#_1-shell-基础" aria-label="Permalink to &quot;1 shell 基础&quot;">​</a></h1><ul><li>shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序</li><li>用户可以用 Shell 来启动、挂起、停止或编写一些程序</li><li>Shell 还是一个功能相当强大的编程语言，易编写，易调试，灵活性较强</li><li>Shell 是解释执行的脚本语言，在 Shell 中可以直接调用 Linux 的系统命令</li></ul><h2 id="_1-1-echo" tabindex="-1">1.1 echo <a class="header-anchor" href="#_1-1-echo" aria-label="Permalink to &quot;1.1 echo&quot;">​</a></h2><ul><li>输出命令 类似 js 的 console.log</li><li><code>-e</code>：激活转义符选项</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出hello</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加-e 像\\t \\e这些都会被转义</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下面输出结果是 a 换行之后输出 b</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a\\nb&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下面输出结果是 a\\nb 直接输出内容不会转义</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a\\nb&quot;</span></span></code></pre></div><h2 id="_1-2-编写执行-shell-脚本" tabindex="-1">1.2 编写执行 shell 脚本 <a class="header-anchor" href="#_1-2-编写执行-shell-脚本" aria-label="Permalink to &quot;1.2 编写执行 shell 脚本&quot;">​</a></h2><ul><li>shell 脚本是以<code>.sh</code>结尾的文件</li><li>脚本文件内容必须以<code>#!/bin/bash</code>开头</li><li>执行文件使用 <code>sh 文件名</code></li><li>不能直接以<code>./文件名</code>执行，因为默认创建的文件是没有执行权限的，需要<code>手动添加执行权限</code>才能这样执行</li></ul><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 编写一个 hello.sh文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a\\tb&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行 使用sh 进行执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.sh</span></span></code></pre></div><h2 id="_1-3-alias" tabindex="-1">1.3 alias <a class="header-anchor" href="#_1-3-alias" aria-label="Permalink to &quot;1.3 alias&quot;">​</a></h2><ul><li>此命令是用来<code>临时</code>给一个命令<code>起别名的</code>，当窗口关闭就会失效</li><li>删除别名使用<code>unalias 别名</code>即可</li></ul><p><strong>案例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 想要给ls -a起一个别名为ls</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这样只需输入 la 就相当于输入ls -a命令了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> la</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ls -a&quot;</span></span></code></pre></div><p><strong>永久生效方法</strong></p><ul><li>想要永久生效需要修改<code>~/.bashrc</code>配置文件</li></ul><p><strong>案例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 永久添加一个la别名 他表示的是ls -a命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 然后添加如下命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> la</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ls -a&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 然后保存，然后输入如下命令使配置文件生效</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#或者输入以下命令也可使配置文件生效</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span></code></pre></div><h2 id="_1-4-命令生效的顺序" tabindex="-1">1.4 命令生效的顺序 <a class="header-anchor" href="#_1-4-命令生效的顺序" aria-label="Permalink to &quot;1.4 命令生效的顺序&quot;">​</a></h2><p><strong>当在 shell 中输入命令按照以下的顺序查找</strong></p><ul><li>绝对路径或相对路径 <ul><li>比如输入/usr/bin/ls 和 ls 这个命令的效果是一样的</li></ul></li><li>别名</li><li>bash 内部的命令</li><li>按照<code>$PATH</code>环境变量定义的目录查找 <ul><li>$PATH 中会定义几个目录</li><li>查找的时候如果第一目录找不到就往后找，找到了就不往后继续找了</li></ul></li></ul><h2 id="_1-5-命令快捷键" tabindex="-1">1.5 命令快捷键 <a class="header-anchor" href="#_1-5-命令快捷键" aria-label="Permalink to &quot;1.5 命令快捷键&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>ctrl+c</td><td>强制终止当前命令</td></tr><tr><td>ctrl+l</td><td>清屏，效果同 clear 命令</td></tr><tr><td>ctrl+a</td><td>光标移动到命令行首</td></tr><tr><td>ctrl+e</td><td>光标移动到命令行尾</td></tr><tr><td>ctrl+u</td><td>从光标所在的位置删除到行首</td></tr></tbody></table><h2 id="_1-6-历史命令" tabindex="-1">1.6 历史命令 <a class="header-anchor" href="#_1-6-历史命令" aria-label="Permalink to &quot;1.6 历史命令&quot;">​</a></h2><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">history</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [选项] [历史命令保存的文件]</span></span></code></pre></div><p><strong>选项</strong></p><ul><li>-c 清空历史命令</li><li>-w 把缓存中的历史命令写入对应的文件中一般是<code>~/.bash_history</code></li></ul><p><strong>案例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有的历史命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">history</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 清空历史命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">history</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当我们在shell中输入过的命令 这些命令会在窗口关闭之后自动保存在~/.bash_history文件中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果想要立马将命令保存进去输入下面的命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">history</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bash_history</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者想要将历史命令保存到别的文件中</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">history</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span></span></code></pre></div><h2 id="_1-7-调用" tabindex="-1">1.7 调用 <a class="header-anchor" href="#_1-7-调用" aria-label="Permalink to &quot;1.7 调用&quot;">​</a></h2><ul><li>使用该命令可以<code>执行历史命令中的某个命令</code>，历史命令中每条命令都有一个 ID</li><li>使用<code>!n</code>执行历史命令中<code>第n条</code>(命令对应的数字)命令</li><li>使用<code>!!</code>执行上一条命令</li><li>使用<code>!字符</code>重复执行最后一条以该字符串开头的命令</li><li>在 shell 中输入<code>!</code>加上面说的规则，然后<code>回车</code>即可</li></ul><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设历史命令有如下几条</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  991</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  992</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  993</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  clear</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  994</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  995</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  996</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行第993条命令 命令行输入如下命令 然后和回车 就会继续执行第993条命令,也就是clear命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">993</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 执行上一条命令，也就是vi b.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行vi命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输入以下命令 会在历史命令中找到最后一个以v开头的命令 也就是vi b.txt这条命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v</span></span></code></pre></div><h2 id="_1-8-输入输出重定向" tabindex="-1">1.8 输入输出重定向 <a class="header-anchor" href="#_1-8-输入输出重定向" aria-label="Permalink to &quot;1.8 输入输出重定向&quot;">​</a></h2><ul><li>stdin 全拼 standard input(标准输入)</li><li>stdout 全拼 standard out(标准输出)</li><li>stderr 全拼 standard error(标准错误)</li></ul><h3 id="_1-8-1-基本概念" tabindex="-1">1.8.1 基本概念 <a class="header-anchor" href="#_1-8-1-基本概念" aria-label="Permalink to &quot;1.8.1 基本概念&quot;">​</a></h3><ul><li><p><strong>标准输出（stdout）</strong>：默认情况下，命令的输出会显示在屏幕上。这称为标准输出，通常<code>文件描述符为 1</code>。</p></li><li><p><strong>标准错误（stderr）</strong>：命令的错误消息默认情况下也显示在屏幕上。这称为标准错误，通常<code>文件描述符为 2</code>。</p><ul><li>比如输入<code>ls kk</code>这个命令，会报错 ，这就是标准错误</li></ul></li><li><p><strong>标准输入（stdin）</strong>：命令的输入默认从键盘获取。这称为标准输入，通常<code>文件描述符为 0</code>。</p></li></ul><h3 id="_1-8-2-输出重定向" tabindex="-1">1.8.2 输出重定向 <a class="header-anchor" href="#_1-8-2-输出重定向" aria-label="Permalink to &quot;1.8.2 输出重定向&quot;">​</a></h3><h4 id="_1-8-2-1-重定向符号" tabindex="-1">1.8.2.1 重定向符号 <a class="header-anchor" href="#_1-8-2-1-重定向符号" aria-label="Permalink to &quot;1.8.2.1 重定向符号&quot;">​</a></h4><ul><li>下面的都是，文件不存在将创建文件</li><li><code>&gt;</code>：将标准输出重定向到一个文件。如果文件存在，将覆盖该文件。</li><li><code>&gt;&gt;</code>：将标准输出追加到一个文件末尾。如果文件不存在，将创建该文件。</li><li><code>2&gt;</code>：将标准错误重定向到一个文件。如果文件存在，将覆盖该文件。</li><li><code>2&gt;&gt;</code>：将标准错误追加到一个文件末尾。如果文件不存在，将创建该文件。</li><li><code>&amp;&gt;</code>：将标准输出和标准错误一起重定向到一个文件。</li><li><code>&amp;&gt;&gt;</code>：将标准输出和标准错误一起追加到一个文件末尾。</li></ul><h4 id="_1-8-2-2-常见用法示例" tabindex="-1">1.8.2.2 常见用法示例 <a class="header-anchor" href="#_1-8-2-2-常见用法示例" aria-label="Permalink to &quot;1.8.2.2 常见用法示例&quot;">​</a></h4><ol><li><p><strong>将输出重定向到文件</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这会将 \`ls\` 命令的输出重定向到 \`output.txt\` 文件中。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.txt</span></span></code></pre></div></li><li><p><strong>将输出追加到文件</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这会将 \`echo\` 命令的输出追加到 \`output.txt\` 文件中，而不是覆盖它。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, World!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.txt</span></span></code></pre></div></li><li><p><strong>将错误消息重定向到文件</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这会将 \`ls\` 命令的错误消息重定向到 \`error.txt\` 文件中。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nonexistentfile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error.txt</span></span></code></pre></div></li><li><p><strong>将输出和错误消息都重定向到同一个文件</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这会将 \`ls\` 命令的输出和错误消息都重定向到 \`all_output.txt\` 文件中。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 命令1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all_output.txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 命令2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> all_output.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 两个命令的作用都是相同的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 命令2 比较好理解  &amp;&gt; 表示将标准输出和标准错误一起重定向到一个文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 所以命令2就是ls命令无论是错或是对都重定向到all_output.txt中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 命令2是一个组合命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2&gt;&amp;1：将标准错误重定向到标准输出的位置。由于标准输出已经被重定向到 all_output.txt 文件，所以标准错误也会被重定向到同一个文件。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &amp;1：表示将标准错误重定向到与标准输出相同的位置。 可以理解为引用标准输出的位置 在这个例子中也就是all_output.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果你只是使用 ls &gt; all_output.txt，那么只有标准输出会被重定向到 all_output.txt，而标准错误仍然会显示在终端上。通过添加 2&gt;&amp;1，你确保标准错误也被重定向到同一个文件中，这样所有输出（包括错误消息）都记录在 all_output.txt 中。</span></span></code></pre></div></li><li><p><strong>将命令的输出作为输入传递给另一个命令</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这会将 \`ls\` 命令的输出通过管道传递给 \`grep\` 命令，\`grep\` 会搜索包含 \`pattern\` 的行。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span></span></code></pre></div></li></ol><h4 id="_1-8-2-3-示例应用" tabindex="-1">1.8.2.3 示例应用 <a class="header-anchor" href="#_1-8-2-3-示例应用" aria-label="Permalink to &quot;1.8.2.3 示例应用&quot;">​</a></h4><p>假设你想将一个程序的标准输出和标准错误都重定向到一个文件，你可以这样做：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./myprogram</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span></span></code></pre></div><p>或者更简单地使用 <code>&amp;&gt;</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./myprogram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output.txt</span></span></code></pre></div><p>这样，程序的所有输出（包括错误消息）都会被记录到 <code>output.txt</code> 文件中。</p><h3 id="_1-8-3-标准输入的重定向" tabindex="-1">1.8.3 标准输入的重定向 <a class="header-anchor" href="#_1-8-3-标准输入的重定向" aria-label="Permalink to &quot;1.8.3 标准输入的重定向&quot;">​</a></h3><p>标准输入重定向允许你从文件或其他命令获取输入，而不是从键盘。常见的重定向操作符有：</p><ul><li><code>&lt;</code>：将标准输入重定向到一个文件。</li><li><code>&lt;&lt;</code>：将标准输入重定向到一个内联文档（heredoc）。</li><li><code>&lt;&lt;&lt;</code>：将标准输入重定向到一个字符串（这里文档）。</li></ul><h4 id="_1-8-3-1-常见用法示例" tabindex="-1">1.8.3.1 常见用法示例 <a class="header-anchor" href="#_1-8-3-1-常见用法示例" aria-label="Permalink to &quot;1.8.3.1 常见用法示例&quot;">​</a></h4><ol><li><p><strong>将文件作为标准输入</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inputfile</span></span></code></pre></div><p>例如，使用 <code>cat</code> 命令读取 <code>file.txt</code> 的内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这与 \`cat file.txt\` 的效果相同，都是将 \`file.txt\` 的内容显示在终端上。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.txt</span></span></code></pre></div></li><li><p><strong>使用管道将一个命令的输出作为另一个命令的输入</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>command1 | command2</span></span></code></pre></div><p>例如，将 <code>ls</code> 命令的输出传递给 <code>grep</code> 命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这会在当前目录中搜索包含 \`pattern\` 的文件或目录。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span></span></code></pre></div></li><li><p><strong>使用内联文档（heredoc）</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delimiter</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">text</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">delimiter</span></span></code></pre></div><p>例如，使用 <code>cat</code> 命令创建一个包含多行文本的文件：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myfile.txt</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">This is a line of text.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">This is another line of text.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre></div><p>这会将多行文本写入 <code>myfile.txt</code> 文件中，直到遇到 <code>EOF</code> 作为结束标志。</p></li><li><p><strong>使用字符串作为输入（here string）</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot;</span></span></code></pre></div><p>例如，将字符串传递给 <code>wc</code> 命令以计算单词数量：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span></span></code></pre></div><p>这会输出 <code>2</code>，表示字符串 &quot;Hello, world!&quot; 有两个单词。</p></li></ol><h4 id="_1-8-3-2-实际应用" tabindex="-1">1.8.3.2 实际应用 <a class="header-anchor" href="#_1-8-3-2-实际应用" aria-label="Permalink to &quot;1.8.3.2 实际应用&quot;">​</a></h4><p>假设你有一个需要从文件读取输入的命令，可以这样使用标准输入重定向：</p><ol><li><p><strong>从文件读取输入</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unsorted.txt</span></span></code></pre></div><p>这会将 <code>unsorted.txt</code> 文件的内容作为输入传递给 <code>sort</code> 命令，并输出排序后的结果。</p></li><li><p><strong>通过管道传递输入</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;firefox&quot;</span></span></code></pre></div><p>这会列出所有运行的进程，然后过滤出包含 &quot;firefox&quot; 的进程信息。</p></li><li><p><strong>内联文档创建文件</strong>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.txt</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Line 1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Line 2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Line 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre></div><p>这会将多行文本写入 <code>example.txt</code> 文件中。</p></li></ol><h4 id="_1-8-3-3-总结" tabindex="-1">1.8.3.3 总结 <a class="header-anchor" href="#_1-8-3-3-总结" aria-label="Permalink to &quot;1.8.3.3 总结&quot;">​</a></h4><p>标准输入是命令读取数据的主要来源，默认是从键盘接收输入。通过重定向操作符 <code>&lt;</code>、<code>&lt;&lt;</code> 和 <code>&lt;&lt;&lt;</code>，可以将文件、字符串或其他命令的输出作为输入传递给命令，使得命令行操作更加灵活和强大。</p><h2 id="_1-9-多命令执行顺序" tabindex="-1">1.9 多命令执行顺序 <a class="header-anchor" href="#_1-9-多命令执行顺序" aria-label="Permalink to &quot;1.9 多命令执行顺序&quot;">​</a></h2><ul><li>声明多个命令直接该怎么执行</li></ul><table tabindex="0"><thead><tr><th>多命令执行符</th><th>格式</th><th>作用</th><th>案例</th></tr></thead><tbody><tr><td>;</td><td>命令 1;命令 2</td><td>多个命令执行，命令直接没有任何逻辑关系</td><td>echo 1;echo2</td></tr><tr><td>&amp;&amp;</td><td>命令 1 &amp;&amp; 命令 2</td><td>逻辑与，只有命令 1 执行正确才会执行命令 2</td><td>echo 1 &amp;&amp; echo2</td></tr><tr><td>||</td><td>命令 1 || 命令 2</td><td>逻辑或，命令 1 执行失败会执行命令 2，反之则 不会执行命令 2</td><td>echo 1 || echo2</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用;符号，即使前面的命令报错了也会执行后面的命令，因为命令之间没有任何关系</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  逻辑与操作 和js差不多</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  逻辑或操作 和js差不多</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><h2 id="_1-10-管道符号" tabindex="-1">1.10 管道符号 <a class="header-anchor" href="#_1-10-管道符号" aria-label="Permalink to &quot;1.10 管道符号&quot;">​</a></h2><ul><li>符号为：<code>|</code></li><li><code>｜前</code>的命令的<code>执行结果</code>会作为<code>｜之后</code>命令的<code>输入</code></li></ul><p><strong>案例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设1.txt有两行 第一行是123 第二行是456</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cat 1.txt的结果会作为 tail -1的输入</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 结果就是显示456</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span></span></code></pre></div><h2 id="_1-11-通配符" tabindex="-1">1.11 通配符 <a class="header-anchor" href="#_1-11-通配符" aria-label="Permalink to &quot;1.11 通配符&quot;">​</a></h2><table tabindex="0"><thead><tr><th>通配符</th><th>作用</th></tr></thead><tbody><tr><td>?</td><td>匹配一个任意字符</td></tr><tr><td>*</td><td>匹配 0 个或多可任意字符</td></tr><tr><td>[]</td><td>匹配中括号中的任意一个</td></tr><tr><td>[-]</td><td>匹配中括号中的范围任意一个 eg:[0-9]匹配 0-9 中任意一个</td></tr><tr><td>[^]</td><td>匹配不是中括号中的任意字符</td></tr></tbody></table><h2 id="_1-12-其他符号" tabindex="-1">1.12 其他符号 <a class="header-anchor" href="#_1-12-其他符号" aria-label="Permalink to &quot;1.12 其他符号&quot;">​</a></h2><table tabindex="0"><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>&#39;&#39;</td><td>单引号，在单引号中所有特殊符号，如<code>$</code>和\`\` \`都没有特殊含义</td></tr><tr><td>&quot;&quot;</td><td>双引号，在双引号中所有特殊符号都没有特殊含义，但是$ \` \\这 3 个例外，拥有调用变量的值，引用命令和转义的含义</td></tr><tr><td>\` \`</td><td>反引号，括起来的是系统命令</td></tr><tr><td>$()</td><td>和反引号一样</td></tr><tr><td>#</td><td>在 shell 脚本中，#开头的行代表注释</td></tr><tr><td>$</td><td>用于调用变量的值</td></tr><tr><td>\\</td><td>转义符号</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果就是$PATH</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;$PATH&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果 PATH这个变量的值 也就是当前系统环境变量有哪些</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 ls这个系统命令的执行结果</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span></code></pre></div><h1 id="_2-变量" tabindex="-1">2 变量 <a class="header-anchor" href="#_2-变量" aria-label="Permalink to &quot;2 变量&quot;">​</a></h1><h2 id="_2-1-变量命名规则" tabindex="-1">2.1 变量命名规则 <a class="header-anchor" href="#_2-1-变量命名规则" aria-label="Permalink to &quot;2.1 变量命名规则&quot;">​</a></h2><ul><li>必须以字母或下划线开头，名字中间只能由字母，数字和下划线组成</li><li>变量名的长度不得超过 255 个字符</li><li>变量名在有效范围内必须唯一</li><li>变量<code>默认类型都是字符串</code></li></ul><h2 id="_2-2-变量的类型" tabindex="-1">2.2 变量的类型 <a class="header-anchor" href="#_2-2-变量的类型" aria-label="Permalink to &quot;2.2 变量的类型&quot;">​</a></h2><ul><li>字符串</li><li>整型</li><li>浮点型</li><li>日期型</li></ul><h2 id="_2-3-用户自定义变量" tabindex="-1">2.3 用户自定义变量 <a class="header-anchor" href="#_2-3-用户自定义变量" aria-label="Permalink to &quot;2.3 用户自定义变量&quot;">​</a></h2><ul><li>变量名不能以数字开头</li><li>等号左右两边不能有空格</li></ul><h3 id="定义变量" tabindex="-1"><strong>定义变量</strong> <a class="header-anchor" href="#定义变量" aria-label="Permalink to &quot;**定义变量**&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意 虽然age的值是10 但是他的类型依然是字符串类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">10</span></span></code></pre></div><h3 id="输出变量" tabindex="-1"><strong>输出变量</strong> <a class="header-anchor" href="#输出变量" aria-label="Permalink to &quot;**输出变量**&quot;">​</a></h3><ul><li>使用<code>$</code>调用变量</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $age</span></span></code></pre></div><h3 id="值默认都是字符串" tabindex="-1"><strong>值默认都是字符串</strong> <a class="header-anchor" href="#值默认都是字符串" aria-label="Permalink to &quot;**值默认都是字符串**&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出的结果是 1+2 所以可以证明值默认是字符串类型</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $z</span></span></code></pre></div><h3 id="在赋值的时候引用变量" tabindex="-1">在赋值的时候引用变量 <a class="header-anchor" href="#在赋值的时候引用变量" aria-label="Permalink to &quot;在赋值的时候引用变量&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可以在双引号中之间调用变量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 也可以使用 \${x} 调用变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${x}</span></span></code></pre></div><h3 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h3><ul><li>查询系统中默认所有已生效的变量，包括系统变量、环境变量，也包括自定义的变量</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只查询有name的变量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span></code></pre></div><h3 id="unset" tabindex="-1">unset <a class="header-anchor" href="#unset" aria-label="Permalink to &quot;unset&quot;">​</a></h3><ul><li>删除变量</li><li>unset 变量名</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除name这个变量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span></code></pre></div><h2 id="_2-4-环境变量" tabindex="-1">2.4 环境变量 <a class="header-anchor" href="#_2-4-环境变量" aria-label="Permalink to &quot;2.4 环境变量&quot;">​</a></h2><ul><li>环境变量是<code>全局变量</code>，自定义变量是<code>局部变量</code></li><li><code>自定义变量</code>会在<code>当前shell中生效</code>，而环<code>境变量</code>会在<code>当前shell以及其子shell中生效</code><ul><li>在 shell 中输入<code>bash</code>命令即可进入一个子 shell</li></ul></li><li>这种变量主要保存的是和系统操作环境相关的数据</li><li>环境变量可以自定义，但是<code>对系统生效的环境变量名</code>和<code>变量作用是固定的</code></li></ul><h3 id="自定义环境变量" tabindex="-1">自定义环境变量 <a class="header-anchor" href="#自定义环境变量" aria-label="Permalink to &quot;自定义环境变量&quot;">​</a></h3><ul><li>使用 export 关键字 <code>export 变量名=变量值</code></li><li>这种方式只能临时创建系统变量，当 shell 关闭或者新打开一个 shell 就会没了</li><li>想要永久生效，需要修改文件</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zs</span></span></code></pre></div><h3 id="env" tabindex="-1">env <a class="header-anchor" href="#env" aria-label="Permalink to &quot;env&quot;">​</a></h3><ul><li>仅仅用来查看环境变量，而看不到本地变量</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有的环境变量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">env</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看环境变量中name相关的环境变量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span></code></pre></div><h3 id="常见的环境变量" tabindex="-1">常见的环境变量 <a class="header-anchor" href="#常见的环境变量" aria-label="Permalink to &quot;常见的环境变量&quot;">​</a></h3><table tabindex="0"><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>HOSTNAME</td><td>主机名</td></tr><tr><td>SHELL</td><td>当前的 shell,LINUX 中的终端有很多种,这个命令就是查看当前用的哪一种终端</td></tr><tr><td>HISTSIZE</td><td>历史命令条数</td></tr><tr><td>SSH_CLIENT</td><td>当前操作环境如果是用 ssh 连接的话，这里会记录客户端的 IP</td></tr><tr><td>USER</td><td>当前登录的用户</td></tr></tbody></table><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOSTNAME</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $SHELL</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HISTSIZE</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $SSH_CLIENT</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $USER</span></span></code></pre></div><h3 id="path" tabindex="-1">PATH <a class="header-anchor" href="#path" aria-label="Permalink to &quot;PATH&quot;">​</a></h3><ul><li><code>系统搜索的路径</code></li><li>具体看上面<code>命令生效顺序章节</code></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $PATH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /root/.nvm/versions/node/v16.15.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span></span></code></pre></div><p><strong>如何可以让一个自定义的脚本可以直接执行</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 现在有hello.sh这个脚本 想让他在全局任意位置可以执行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 也就是直接输入hello.sh可直接执行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式一</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 把这个文件拷贝到 $PATH的其中任意目录下</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 比如/root/bin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 原理：这个命令执行的顺序是从$PATH这一堆路径中查找的，找到了就执行</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式二</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 把脚本文件所在的目录添加到PATH变量中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假如这个脚本文件在 /root/shells下面</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意linux中路径直接到分隔符用 :</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:/root/shells</span></span></code></pre></div><h3 id="语系环境变量" tabindex="-1">语系环境变量 <a class="header-anchor" href="#语系环境变量" aria-label="Permalink to &quot;语系环境变量&quot;">​</a></h3><ul><li>查询当前系统语系</li><li>在 Linux 中通过<code>locale命令</code>来设置程序运行的不同语言环境</li><li>locale 由 ANSI C 提供支持</li><li><code>LANG：定义系统主语系的变量</code></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># locale的命令规则为&lt;语言&gt;_&lt;地区&gt;.&lt;字符集编码&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如 zh_CN.UTF-8</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># zh表示中文。CN表示大陆地区 UTF-8表示字符集</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询当前系统语系</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">locale</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询当前系统主语系</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $LANG</span></span></code></pre></div><h3 id="中文支持" tabindex="-1">中文支持 <a class="header-anchor" href="#中文支持" aria-label="Permalink to &quot;中文支持&quot;">​</a></h3><ul><li>图像界面可以支持中文</li><li>第三方工具比如 xshell 语系设置正确可以支持中文</li><li>虚拟机中纯字符界面不支持中文</li></ul><h2 id="_2-5-参数位置变量" tabindex="-1">2.5 参数位置变量 <a class="header-anchor" href="#_2-5-参数位置变量" aria-label="Permalink to &quot;2.5 参数位置变量&quot;">​</a></h2><ul><li>这种变量主要是用来获取脚本执行时传入的参数或者数据的</li><li>变量名不能自定义，变量的作用也是固定的</li></ul><table tabindex="0"><thead><tr><th>变量名</th><th>作用</th></tr></thead><tbody><tr><td>$n</td><td>n 是数字，$0表示命令本身，$1-9表示第1到第9个参数，10以上的参数需要用大括号包含,如<code>\${10}</code></td></tr><tr><td>$*</td><td>获取命令中所有参数，但是把所有参数当作一个整体</td></tr><tr><td>$@</td><td>获取命令中所有参数，但是把所有参数进行区分，类似 js 的 arguments</td></tr><tr><td>$#</td><td>获取所有参数的个数</td></tr></tbody></table><p><strong>举例</strong></p><p>sum.sh</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取传入的第一个参数和第二个参数的和</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $sum</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行该文件 输出结果为7</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sum.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># $*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 比如输入如下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># $*  会将1 2 3看作是一个整体</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 那么进行循环的时候也只会执行一次</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># $@ 会将1 2 3拆分</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果进行循环 那么就会执行三次</span></span></code></pre></div><h2 id="_2-6-预定义变量" tabindex="-1">2.6 预定义变量 <a class="header-anchor" href="#_2-6-预定义变量" aria-label="Permalink to &quot;2.6 预定义变量&quot;">​</a></h2><ul><li>脚本中已经定义好的变量，变量名不能自定义，作用也是固定的</li></ul><table tabindex="0"><thead><tr><th>变量名</th><th>作用</th></tr></thead><tbody><tr><td>$?</td><td>最后一次执行的命令的返回状态，0 表示正确执行，非 0 表示不正确执行</td></tr><tr><td>$$</td><td>当前进行的进程号(PID)</td></tr></tbody></table><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># $?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假如我执行 ls 命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 然后 输入 echo $? 可以查看ls的执行结果</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $?</span></span></code></pre></div><h2 id="_2-7-read" tabindex="-1">2.7 read <a class="header-anchor" href="#_2-7-read" aria-label="Permalink to &quot;2.7 read&quot;">​</a></h2><ul><li>和用户交互用的命令</li></ul><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [选项] [变量名]</span></span></code></pre></div><p><strong>选项</strong></p><ul><li><code>-p</code> 提示信息，在等待 read 输入时，输出提示信息</li><li><code>-t</code> 秒数：read 命令会已知等待用户输入，使用此选项可以指定等待时间</li><li><code>-n</code> 字符数，read 命令只接受指定的字符数就会执行</li><li><code>-s</code> 隐藏输入的数据，适用于机密信息的输入</li></ul><p><strong>举例</strong></p><p>read.sh</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意每个交互输入完毕之后 按回车进行下一步</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -t 3 如果3秒之后还没有输入 就会跳过当前交互 执行下一个交互 那么对应的name这个变量的值也是空的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -p &#39;信息&#39; 表示给用户信息提示</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 请输入姓名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\n&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -n 1 指定用户输入的字数只有1个 当输入一个之后不用按回车 会自动的执行下一个交互</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 请输入性别[男/女]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sex</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\n&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -s 输入的时候不显示出来</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  请输入密码</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  passwd</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\n&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $name $sex $passwd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在shell 中输入 sh read.sh即可执行</span></span></code></pre></div><h1 id="_3-运算符" tabindex="-1">3 运算符 <a class="header-anchor" href="#_3-运算符" aria-label="Permalink to &quot;3 运算符&quot;">​</a></h1><ul><li>shell 语言是弱类型的语言</li><li>且默认声明的变量是字符串类型</li></ul><h2 id="_3-1-declare" tabindex="-1">3.1 declare <a class="header-anchor" href="#_3-1-declare" aria-label="Permalink to &quot;3.1 declare&quot;">​</a></h2><ul><li>用于声明变量的类型</li></ul><table tabindex="0"><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-</td><td>给变量设定类型属性</td></tr><tr><td>+</td><td>取消变量的类型属性</td></tr><tr><td>-a</td><td>将变量声明为属组类型</td></tr><tr><td>-i</td><td>将变量声明为整数类型</td></tr><tr><td>-x</td><td>将变量声明为环境变量</td></tr><tr><td>-r</td><td>将变量声明为只读变量</td></tr><tr><td>-p</td><td>显示变量被声明的类型</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - 和 +  后面都可以跟a、i、x、r</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可以使用declare声明带类型的变量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 也可以给已声明的类型增加或者取消变量类型属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 一旦设置变量为只读类型将无法使用+r取消只读类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 案例一</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 声明变量a、b 声明变量c是a+b的值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认情况下c的值是1+2 因为变量默认情况下是字符串类型的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$b</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $c  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1+2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只需要这样声明就行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 表示声明一个变量c类型是整型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$a+$b</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $c </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 案例2 取消变量x的整型类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#声明一个变量x 类型是整型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 显示x的类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># declare -i x=&quot;1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#取消x的整型类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> +i x</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 显示x的类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># declare -- x=&quot;1&quot;</span></span></code></pre></div><p><strong>数组</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 声明为数组类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> names</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 给数组赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names[0]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">zhangsan</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names[1]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lisi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认只打印第一个元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 直接输出names 只打印第一个元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># echo $names 相当于 echo \${names[0]}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $names </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># zhangsan</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印第二个元素</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${names[1]}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># lisi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印全部元素</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${names[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># zhangsan lisi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 什么时候使用 \${} 调用变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当输出的变量作为一个整体的时候使用\`\${变量}\`输出</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 比如想要打印names的第一个元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用$names[0]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这是错误的因为会把$names当作一个整体然后打印zhangsan[0] zhangsan不是一个变量所以结果就是zhangsan[0]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $names</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[0]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # zhangsan[0]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 正确做法是</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${names[0]} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># zhangsan</span></span></code></pre></div><p><strong>声明环境变量</strong></p><ul><li><code>export</code>命令声明的环境变量 最终执行的是<code>declare -x</code>命令</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 案例 设置kk为环境变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询一下是否设置成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kk</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # kk=1</span></span></code></pre></div><h2 id="_3-2-数值运算的方法" tabindex="-1">3.2 数值运算的方法 <a class="header-anchor" href="#_3-2-数值运算的方法" aria-label="Permalink to &quot;3.2 数值运算的方法&quot;">​</a></h2><ul><li>方法比较多 看案例</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式一</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意+两边必须要有空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $num1 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $num2)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $sum </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式二</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># $(())作用看下面的笔记</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sum1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(($num1+$num2))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $sum1 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式三</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sum2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$num1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$num2]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $sum2 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式四</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$num1+$num2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $sum3 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#3</span></span></code></pre></div><h2 id="_3-3-优先级" tabindex="-1">3.3 优先级 <a class="header-anchor" href="#_3-3-优先级" aria-label="Permalink to &quot;3.3 优先级&quot;">​</a></h2><ul><li><p>优先级越高越先执行</p><table tabindex="0"><thead><tr><th>优先级</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>13</td><td>-，+</td><td>单目负、单目正</td></tr><tr><td>12</td><td>!，~</td><td>逻辑非、按位取反或补码</td></tr><tr><td>11</td><td>*，/，%</td><td>乘、除、取模</td></tr><tr><td>10</td><td>+，-</td><td>加、减</td></tr><tr><td>9</td><td>&lt;&lt;，&gt;&gt;</td><td>按位左移、按位右移</td></tr><tr><td>8</td><td>&lt;，&lt;=，&gt;，&gt;=</td><td>小于或等于、大于或等于、小于、大于</td></tr><tr><td>7</td><td>==，!=</td><td>等于、不等于</td></tr><tr><td>6</td><td>&amp;</td><td>按位与</td></tr><tr><td>5</td><td>^</td><td>按位异或</td></tr><tr><td>4</td><td>|</td><td>按位或</td></tr><tr><td>3</td><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>2</td><td>||</td><td>逻辑或</td></tr><tr><td>1</td><td>=，+=，-=，*=，/=，%=，&amp;=，^=，|=，&lt;&lt;=，&gt;&gt;=</td><td>赋值、运算且赋值</td></tr></tbody></table></li></ul><h2 id="_3-4-和" tabindex="-1">3.4 (())和$(()) <a class="header-anchor" href="#_3-4-和" aria-label="Permalink to &quot;3.4 (())和$(())&quot;">​</a></h2><p>在 Bash 中，<code>(( ))</code> 和 <code>$(())</code> 都用于执行算术运算，但它们的行为和用途略有不同。</p><h3 id="的行为" tabindex="-1"><code>(( ))</code> 的行为 <a class="header-anchor" href="#的行为" aria-label="Permalink to &quot;\`(( ))\` 的行为&quot;">​</a></h3><ul><li><strong>主要用途</strong>：用于执行算术运算和条件判断。</li><li><strong>返回结果</strong>：<code>(( ))</code> 本身不返回值，而是设置退出状态码（exit status）。如果表达式的结果为非零，则退出状态码为 0（表示真）；如果结果为零，则退出状态码为 1（表示假）。</li></ul><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 (( )) 进行加法运算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Sum: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 (( )) 进行条件判断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2)); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;num1 小于 num2&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;num1 不小于 num2&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><p>在这个例子中，<code>((sum = num1 + num2))</code> 计算并设置 <code>sum</code> 的值，但 <code>(( ))</code> 本身不返回值。相反，它设置了退出状态码，这在条件判断中非常有用。</p><h3 id="的行为-1" tabindex="-1"><code>$(())</code> 的行为 <a class="header-anchor" href="#的行为-1" aria-label="Permalink to &quot;\`$(())\` 的行为&quot;">​</a></h3><ul><li><strong>主要用途</strong>：用于命令替换，将算术运算的结果作为字符串返回。</li><li><strong>返回结果</strong>：<code>$(())</code> 返回算术运算的结果，并将其作为字符串插入到命令中。</li></ul><h4 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 $(()) 进行加法运算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(($num1 + $num2))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Sum: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><p>在这个例子中，<code>$(($num1 + $num2))</code> 计算并返回结果 <code>15</code>，然后将其赋值给变量 <code>sum</code>。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><p><strong><code>(( ))</code></strong>：</p><ul><li>用于执行算术运算和条件判断。</li><li>不返回值，而是设置退出状态码。</li><li>结果可以直接用于控制结构中。</li></ul></li><li><p><strong><code>$(())</code></strong>：</p><ul><li>用于命令替换。</li><li>返回算术运算的结果作为字符串。</li><li>适合嵌入到其他命令中。</li></ul></li></ul><h3 id="示例对比" tabindex="-1">示例对比 <a class="header-anchor" href="#示例对比" aria-label="Permalink to &quot;示例对比&quot;">​</a></h3><h4 id="使用" tabindex="-1">使用 <code>(( ))</code> <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用 \`(( ))\`&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 (( )) 进行加法运算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Sum: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 (( )) 进行条件判断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2)); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;num1 小于 num2&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;num1 不小于 num2&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><h4 id="使用-1" tabindex="-1">使用 <code>$(())</code> <a class="header-anchor" href="#使用-1" aria-label="Permalink to &quot;使用 \`$(())\`&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 $(()) 进行加法运算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(($num1 + $num2))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Sum: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><h3 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h3><ul><li><code>(( ))</code> 更适合用于控制结构和条件判断，因为它设置退出状态码。</li><li><code>$(())</code> 更适合用于命令替换和将结果嵌入到其他命令中，因为它返回字符串结果。</li></ul><h1 id="_4-环境变量配置文件" tabindex="-1">4 环境变量配置文件 <a class="header-anchor" href="#_4-环境变量配置文件" aria-label="Permalink to &quot;4 环境变量配置文件&quot;">​</a></h1><h2 id="_4-1-source" tabindex="-1">4.1 source <a class="header-anchor" href="#_4-1-source" aria-label="Permalink to &quot;4.1 source&quot;">​</a></h2><ul><li>修改完配置文件后，必须注销重新登录，配置文件才能生效</li><li>使用 source 命令，<code>可以直接让修改过的配置文件生效</code></li></ul><p><strong>案例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假如修改了 bash_profile配置文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在不注销的情况下使配置文件生效</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式一 使用source命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash_profile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式二 使用 . 直接执行当前文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash_profile</span></span></code></pre></div><h2 id="_4-2-环境变量配置文件简介" tabindex="-1">4.2 环境变量配置文件简介 <a class="header-anchor" href="#_4-2-环境变量配置文件简介" aria-label="Permalink to &quot;4.2 环境变量配置文件简介&quot;">​</a></h2><ul><li>环境变量配置文件中，主要是<code>定义系统操作环境生效的系统默认环境变量</code></li><li>PATH、HISTSIZE、PS1、HOSTNAME 等环境变量写入对应的环境配置文件</li></ul><table tabindex="0"><thead><tr><th>路径</th><th>说明</th></tr></thead><tbody><tr><td>/etc/profile</td><td>针对所有的用户生效</td></tr><tr><td>/etc/bashrc</td><td>针对所有的用户生效</td></tr><tr><td>~/.bash_profile</td><td>只会对当前用户生效</td></tr><tr><td>~/.bashrc</td><td>只会对当前用户生效</td></tr></tbody></table><h2 id="_4-3-环境变量配置文件的功能" tabindex="-1">4.3 环境变量配置文件的功能 <a class="header-anchor" href="#_4-3-环境变量配置文件的功能" aria-label="Permalink to &quot;4.3 环境变量配置文件的功能&quot;">​</a></h2><h3 id="etc-profile" tabindex="-1"><strong>/etc/profile</strong> <a class="header-anchor" href="#etc-profile" aria-label="Permalink to &quot;**/etc/profile**&quot;">​</a></h3><ul><li>在这里修改<code>系统变量</code></li><li>这个文件<code>针对所有的shell生效的</code></li></ul><table tabindex="0"><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>USER</td><td>用户名</td></tr><tr><td>LOGNAME</td><td>登录名</td></tr><tr><td>MAIL</td><td>邮箱地址</td></tr><tr><td>PATH</td><td>查找路径</td></tr><tr><td>HOSTNAME</td><td>主机名</td></tr><tr><td>umask</td><td>权限掩码</td></tr></tbody></table><h3 id="bash-profile" tabindex="-1"><strong>~/.bash_profile</strong> <a class="header-anchor" href="#bash-profile" aria-label="Permalink to &quot;**~/.bash_profile**&quot;">​</a></h3><ul><li>在这里修改<code>PATH</code>路径</li><li>这个文件只<code>针对当前用户的shell生效</code></li></ul><h3 id="etc-bashrc" tabindex="-1"><strong>/etc/bashrc</strong> <a class="header-anchor" href="#etc-bashrc" aria-label="Permalink to &quot;**/etc/bashrc**&quot;">​</a></h3><ul><li>shell 有很多的类型，比如 bashsehll、zhshell 等等</li><li>这个文件<code>针对的是所有的bash shell生效的</code></li></ul><h3 id="bashrc" tabindex="-1"><strong>~/.bashrc</strong> <a class="header-anchor" href="#bashrc" aria-label="Permalink to &quot;**~/.bashrc**&quot;">​</a></h3><ul><li>这个文件针对的是<code>当前用户的bash shell生效的</code></li><li>这里修改别名，配置 alias</li></ul><h3 id="其他配置文件" tabindex="-1">其他配置文件 <a class="header-anchor" href="#其他配置文件" aria-label="Permalink to &quot;其他配置文件&quot;">​</a></h3><p><strong>～/.bash_logout</strong></p><ul><li>注销时生效的环境变量配置文件</li><li>当注销时，会执行这个配置文件</li></ul><p><strong>~/.bash_history</strong></p><ul><li>当正确退出计算机时候，会把历史记录写入改文件</li></ul><p><strong>Shell 登录信息</strong></p><ul><li>当登录的时候会执行的配置文件</li><li>本地终端欢迎信息<code>/etc/issue</code></li><li>远程终端欢迎信息<code>/etc/issue.net</code></li><li>本地和远程都生效<code>/etc/motd</code></li></ul><table tabindex="0"><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>/d</td><td>当前系统日期</td></tr><tr><td>/s</td><td>显示操作系统名称</td></tr><tr><td>/l</td><td>显示登录的终端号</td></tr><tr><td>/m</td><td>显示硬件体系结构</td></tr><tr><td>/n</td><td>显示主机名</td></tr><tr><td>/o</td><td>显示域名</td></tr><tr><td>/r</td><td>显示内核版本</td></tr><tr><td>/t</td><td>显示当前系统时间</td></tr><tr><td>/u</td><td>显示当前登录的用户名序列号</td></tr></tbody></table><h1 id="_5-文件操作" tabindex="-1">5 文件操作 <a class="header-anchor" href="#_5-文件操作" aria-label="Permalink to &quot;5 文件操作&quot;">​</a></h1><h2 id="_5-1-cut" tabindex="-1">5.1 cut <a class="header-anchor" href="#_5-1-cut" aria-label="Permalink to &quot;5.1 cut&quot;">​</a></h2><ul><li>cut 用来提取文本中的某一部分文本</li><li>语法 <code>cut [选项] 文件名或内容</code></li><li>选项 <ul><li><code>-f </code>列号，用来指定分隔第几列的数据</li><li><code>-d</code> 分隔符，被分割的文本以什么符号为规律进行分隔</li></ul></li></ul><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># demo.txt的内容如下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i-1-2-r-c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">w-1-2-r-c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">q-1-2-r-c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 现在需要提取的是第一列和最后一列的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可以看到都是以-进行分隔的，所以-d就写-</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这样-f才能正确的采集到列号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1,5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i-c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">w-c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">q-c</span></span></code></pre></div><h2 id="_5-2-printf" tabindex="-1">5.2 printf <a class="header-anchor" href="#_5-2-printf" aria-label="Permalink to &quot;5.2 printf&quot;">​</a></h2><ul><li><p>用于格式化并输出文本</p></li><li><p>语法：<code>printf 输出格式 填充内容</code></p></li><li><p>rintf 不会像 <strong>echo</strong> 自动添加换行符，我们可以手动添加 <strong>\\n</strong>。</p></li><li><p>只列举部分使用 用到的时候可以去查<a href="https://www.runoob.com/linux/linux-shell-printf.html#:~:text=printf%20%E5%91%BD%E4%BB%A4%E6%A8%A1%E4%BB%BF%20C%20%E7%A8%8B%E5%BA%8F%E5%BA%93%EF%BC%88library%EF%BC%89%E9%87%8C%E7%9A%84%20printf%20%28%29%20%E7%A8%8B%E5%BA%8F%E3%80%82%20printf,printf%20%E7%9A%84%E8%84%9A%E6%9C%AC%E6%AF%94%E4%BD%BF%E7%94%A8%20echo%20%E7%A7%BB%E6%A4%8D%E6%80%A7%E5%A5%BD%E3%80%82%20printf%20%E4%BD%BF%E7%94%A8%E5%BC%95%E7%94%A8%E6%96%87%E6%9C%AC%E6%88%96%E7%A9%BA%E6%A0%BC%E5%88%86%E9%9A%94%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C%E5%A4%96%E9%9D%A2%E5%8F%AF%E4%BB%A5%E5%9C%A8%20printf%20%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%88%B6%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AE%BD%E5%BA%A6%E3%80%81%E5%B7%A6%E5%8F%B3%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F%E7%AD%89%E3%80%82" target="_blank" rel="noreferrer">链接</a></p></li></ul><p><strong>参数说明</strong></p><table tabindex="0"><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>%ns</td><td>输出字符串，n 表示输出几个字符串</td></tr><tr><td>%nd 或 %ni</td><td>输出整数，n 表示输出多少个整数</td></tr><tr><td></td><td></td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%-10s %-8s %-4s\\n&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 姓名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 性别</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 体重kg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -10s 指一个宽度为 10 个字符（- 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对应的填充内容是姓名 所以算上姓名这两字还会输出8个空格 加起来一共10个字</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -8s 输出一个宽为8的字符 算上性别填充两个字符还要输出6个空格</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -4s 输出一个宽为4的字符 体重kg正好是4个字符</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># \\n 换行符。输出这些后会换行继续输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">姓名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        性别</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      体重kg</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设有一个a.txt 内容如下 格式是没有规律的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 所以就无法用cut命令来切割想要的内容了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可以使用printf先格式化 然后在切割</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">姓名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   性别</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 体重kg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 郭靖</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 男</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   66.1234</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杨过</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 男</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   48.6543</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">郭芙</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  女</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 47.9876</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># $(cat a.txt) 可以拿到执行后的内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># %s- 表示填充内容后面是-隔开</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%s-%s-%s\\n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果 这样就规律了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">姓名-性别-体重kg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">郭靖-男-66.1234</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杨过-男-48.6543</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">郭芙-女-47.9876</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#使用cut配合使用</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%s-%s-%s\\n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1,2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行结果</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">姓名-性别</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">郭靖-男</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杨过-男</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">郭芙-女</span></span></code></pre></div><h2 id="_5-3-awk" tabindex="-1">5.3 awk <a class="header-anchor" href="#_5-3-awk" aria-label="Permalink to &quot;5.3 awk&quot;">​</a></h2><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 条件1{动作1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 条件2{动作2}...条件n{动作n}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件名</span></span></code></pre></div><ul><li><p>条件(Pattern)</p><ul><li>一般使用表达式作为条件</li><li>eg</li><li>x &gt; 10 判断 x 的值是否大于 10</li></ul></li><li><p>常见动作(Action)</p><ul><li>格式化输出</li><li>print：打印输出。</li><li>变量赋值：如 <code>sum += $1</code>。</li><li>控制语句：如 <code>if、for、while</code> 等</li></ul></li></ul><p><strong>内置变量</strong></p><p>awk 提供了一些内置变量，常用的有：</p><ul><li>$0：当前记录（整行文本）。</li><li>$1,2, ..., $n：当前记录的第 n 个字段。</li><li>NR：当前记录数（行号）。</li><li>NF：当前记录的字段数。</li><li>FS：字段分隔符（默认是空格或制表符）。</li><li>OFS：输出字段分隔符（默认是空格）。</li><li>RS：记录分隔符（默认是换行符）。</li><li>ORS：输出记录分隔符（默认是换行符）。</li></ul><h4 id="nr" tabindex="-1"><strong>NR</strong> <a class="header-anchor" href="#nr" aria-label="Permalink to &quot;**NR**&quot;">​</a></h4><p>在 <code>awk</code> 中，<code>NR</code> 是一个内置变量，表示当前处理的记录（行）号。<code>NR</code> 从 1 开始，每处理一行数据，<code>NR</code> 的值就会增加 1。因此，<code>NR</code> 可以用来跟踪当前处理的是文件中的第几行。</p><p><strong>使用 <code>NR</code> 的示例</strong></p><p><strong>打印行号和行内容</strong></p><p>假设有一个名为 <code>data.txt</code> 的文件，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Alice 30 50000</span></span>
<span class="line"><span>Bob 25 60000</span></span>
<span class="line"><span>Charlie 35 70000</span></span></code></pre></div><p>你希望打印每一行的行号和行内容。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ print NR, $0 }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 Alice 30 50000</span></span>
<span class="line"><span>2 Bob 25 60000</span></span>
<span class="line"><span>3 Charlie 35 70000</span></span></code></pre></div><p>在这个例子中，<code>print NR, $0</code> 打印当前行号和整行内容。</p><p><strong>处理特定行</strong></p><p>你可以使用 <code>NR</code> 来处理特定的行。例如，只处理文件中的前两行。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;NR &lt;= 2 { print $0 }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Alice 30 50000</span></span>
<span class="line"><span>Bob 25 60000</span></span></code></pre></div><p>在这个例子中，<code>NR &lt;= 2</code> 作为条件，只处理行号小于等于 2 的行。</p><p><strong>结合 <code>BEGIN</code> 和 <code>END</code> 块</strong></p><p>你可以结合 <code>BEGIN</code> 和 <code>END</code> 块来使用 <code>NR</code>。例如，统计文件中的总行数。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;END { print &quot;Total number of lines:&quot;, NR }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Total number of lines: 3</span></span></code></pre></div><p>在这个例子中，<code>END</code> 块在处理完所有输入数据之后执行，<code>NR</code> 的值表示总行数。</p><p><strong>BEGIN</strong></p><p>在 <code>awk</code> 中，<code>BEGIN</code> 是一个特殊的模式块，用于在处理任何输入数据之前执行一次初始化操作。你可以在 <code>BEGIN</code> 块中设置变量、打印标题或进行其他初始化工作。</p><h4 id="begin-块的使用" tabindex="-1">BEGIN 块的使用 <a class="header-anchor" href="#begin-块的使用" aria-label="Permalink to &quot;BEGIN 块的使用&quot;">​</a></h4><p><code>BEGIN</code> 块的语法如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN { ... } { ... }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span></span></code></pre></div><p>在 <code>BEGIN</code> 块中，你可以执行任何合法的 <code>awk</code> 语句。常见的用途包括设置字段分隔符（<code>FS</code> 和 <code>OFS</code>）、初始化变量、打印表头等。</p><p><strong>示例</strong></p><p><strong>设置字段分隔符</strong></p><p>假设有一个名为 <code>data.txt</code> 的文件，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name:age:salary</span></span>
<span class="line"><span>Alice:30:50000</span></span>
<span class="line"><span>Bob:25:60000</span></span>
<span class="line"><span>Charlie:35:70000</span></span></code></pre></div><p>你希望使用冒号（<code>:</code>）作为输入字段分隔符，并使用逗号（<code>,</code>）作为输出字段分隔符。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN { FS = &quot;:&quot;; OFS = &quot;,&quot; } { print $1, $2, $3 }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name,age,salary</span></span>
<span class="line"><span>Alice,30,50000</span></span>
<span class="line"><span>Bob,25,60000</span></span>
<span class="line"><span>Charlie,35,70000</span></span></code></pre></div><p><strong>打印表头</strong></p><p>假设你有一个文件 <code>data.txt</code>，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Alice 30 50000</span></span>
<span class="line"><span>Bob 25 60000</span></span>
<span class="line"><span>Charlie 35 70000</span></span></code></pre></div><p>你希望在输出中添加一个表头。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN { print &quot;Name,Age,Salary&quot; } { print $1 &quot;,&quot; $2 &quot;,&quot; $3 }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Name,Age,Salary</span></span>
<span class="line"><span>Alice,30,50000</span></span>
<span class="line"><span>Bob,25,60000</span></span>
<span class="line"><span>Charlie,35,70000</span></span></code></pre></div><p><strong>初始化变量</strong></p><p>你可以在 <code>BEGIN</code> 块中初始化变量，然后在处理数据时使用这些变量。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN { total_salary = 0 } { total_salary += $3 } END { print &quot;Total Salary:&quot;, total_salary }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Total Salary: 180000</span></span></code></pre></div><p>在这个例子中，<code>BEGIN { total_salary = 0 }</code> 初始化了一个变量 <code>total_salary</code>，然后在处理每一行数据时累加第三个字段的值。最后，在 <code>END</code> 块中打印总工资。</p><p><strong>END</strong></p><p>在 <code>awk</code> 中，<code>END</code> 是另一个特殊的模式块，用于在处理完所有输入数据之后执行一次收尾操作。你可以在 <code>END</code> 块中进行总结性工作，例如打印累计结果、释放资源或进行其他清理工作。</p><h4 id="end-块的使用" tabindex="-1"><code>END</code> 块的使用 <a class="header-anchor" href="#end-块的使用" aria-label="Permalink to &quot;\`END\` 块的使用&quot;">​</a></h4><p><code>END</code> 块的语法如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ ... } END { ... }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span></span></code></pre></div><p>在 <code>END</code> 块中，你可以执行任何合法的 <code>awk</code> 语句。常见的用途包括打印累计结果、计算平均值、输出统计信息等。</p><p><strong>示例</strong></p><p><strong>打印累计结果</strong></p><p>假设有一个名为 <code>data.txt</code> 的文件，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Alice 30 50000</span></span>
<span class="line"><span>Bob 25 60000</span></span>
<span class="line"><span>Charlie 35 70000</span></span></code></pre></div><p>你希望计算并打印所有人的总工资。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ total_salary += $3 } END { print &quot;Total Salary:&quot;, total_salary }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Total Salary: 180000</span></span></code></pre></div><p>在这个例子中，<code>total_salary += $3</code> 在处理每一行数据时累加第三个字段的值。最后，在 <code>END</code> 块中打印总工资。</p><p><strong>计算平均值</strong></p><p>假设你希望计算并打印所有人的平均工资。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ total_salary += $3; count++ } END { print &quot;Average Salary:&quot;, total_salary / count }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Average Salary: 60000</span></span></code></pre></div><p>在这个例子中，<code>total_salary += $3</code> 累加第三个字段的值，<code>count++</code> 计数行数。最后，在 <code>END</code> 块中计算并打印平均工资。</p><p><strong>结合 <code>BEGIN</code> 和 <code>END</code></strong></p><p>你可以同时使用 <code>BEGIN</code>、主处理块和 <code>END</code> 块来完成复杂的任务。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN { print &quot;Processing data...&quot; }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     { total_salary += $3; count++ }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     END { print &quot;Total Salary:&quot;, total_salary; print &quot;Average Salary:&quot;, total_salary / count }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Processing data...</span></span>
<span class="line"><span>Total Salary: 180000</span></span>
<span class="line"><span>Average Salary: 60000</span></span></code></pre></div><p>在这个例子中，<code>BEGIN</code> 块打印开始处理的消息，主处理块累加工资和计数行数，<code>END</code> 块打印总工资和平均工资。</p><h4 id="fs" tabindex="-1"><strong>FS</strong> <a class="header-anchor" href="#fs" aria-label="Permalink to &quot;**FS**&quot;">​</a></h4><p><code>FS</code> 是 <code>awk</code> 中的一个内置变量，用于指定输入字段分隔符（Field Separator）。<code>awk</code> 使用 <code>FS</code> 来确定如何分割输入行中的字段。默认情况下，<code>FS</code> 是空格或制表符，但你可以根据需要将其设置为其他字符或字符串。</p><p><strong>使用 <code>FS</code></strong></p><p>你可以通过以下几种方式设置 <code>FS</code>：</p><ol><li><p><strong>在命令行中使用 <code>-F</code> 选项</strong>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{print $1, $2}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span></span></code></pre></div></li><li><p><strong>在 <code>BEGIN</code> 块中设置 <code>FS</code></strong>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN { FS = &quot;:&quot; } { print $1, $2 }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span></span></code></pre></div></li></ol><p><strong>示例</strong></p><p>假设有一个名为 <code>data.txt</code> 的文件，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name:age:salary</span></span>
<span class="line"><span>Alice:30:50000</span></span>
<span class="line"><span>Bob:25:60000</span></span>
<span class="line"><span>Charlie:35:70000</span></span></code></pre></div><p>你希望使用冒号（<code>:</code>）作为字段分隔符。</p><p><strong>使用 <code>-F</code> 选项</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{print $1, $2}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name age</span></span>
<span class="line"><span>Alice 30</span></span>
<span class="line"><span>Bob 25</span></span>
<span class="line"><span>Charlie 35</span></span></code></pre></div><p><strong>在 <code>BEGIN</code> 块中设置 <code>FS</code></strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN { FS = &quot;:&quot; } { print $1, $2 }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出与上面相同：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name age</span></span>
<span class="line"><span>Alice 30</span></span>
<span class="line"><span>Bob 25</span></span>
<span class="line"><span>Charlie 35</span></span></code></pre></div><p><strong>复杂示例</strong></p><p>假设你有一个文件 <code>data.csv</code>，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name,age,salary</span></span>
<span class="line"><span>Alice,30,50000</span></span>
<span class="line"><span>Bob,25,60000</span></span>
<span class="line"><span>Charlie,35,70000</span></span></code></pre></div><p>你希望使用逗号（<code>,</code>）作为字段分隔符，并打印每行的第一个和第三个字段。</p><p><strong>使用 <code>-F</code> 选项</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{print $1, $3}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.csv</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name salary</span></span>
<span class="line"><span>Alice 50000</span></span>
<span class="line"><span>Bob 60000</span></span>
<span class="line"><span>Charlie 70000</span></span></code></pre></div><p><strong>在 <code>BEGIN</code> 块中设置 <code>FS</code></strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN { FS = &quot;,&quot; } { print $1, $3 }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.csv</span></span></code></pre></div><p>输出与上面相同：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name salary</span></span>
<span class="line"><span>Alice 50000</span></span>
<span class="line"><span>Bob 60000</span></span>
<span class="line"><span>Charlie 70000</span></span></code></pre></div><h4 id="ofs" tabindex="-1">OFS <a class="header-anchor" href="#ofs" aria-label="Permalink to &quot;OFS&quot;">​</a></h4><p><code>OFS</code> 是 <code>awk</code> 中的一个内置变量，用于指定输出字段分隔符（Output Field Separator）。默认情况下，<code>awk</code> 使用空格作为输出字段分隔符。如果你希望使用其他字符或字符串作为输出字段分隔符，可以通过设置 <code>OFS</code> 变量来实现。</p><p><strong>使用 <code>OFS</code></strong></p><p>你可以在 <code>awk</code> 程序中通过 <code>BEGIN</code> 块来设置 <code>OFS</code> 变量。例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN { OFS = &quot;,&quot; } { print $1, $2, $3 }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span></span></code></pre></div><p><strong>示例</strong></p><p>假设有一个名为 <code>data.txt</code> 的文件，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name age salary</span></span>
<span class="line"><span>Alice 30 50000</span></span>
<span class="line"><span>Bob 25 60000</span></span>
<span class="line"><span>Charlie 35 70000</span></span></code></pre></div><p>你希望将输出字段分隔符设置为逗号（<code>,</code>）。</p><p><strong>使用 <code>OFS</code> 设置输出字段分隔符</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN { OFS = &quot;,&quot; } { print $1, $2, $3 }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name,age,salary</span></span>
<span class="line"><span>Alice,30,50000</span></span>
<span class="line"><span>Bob,25,60000</span></span>
<span class="line"><span>Charlie,35,70000</span></span></code></pre></div><p>在这个例子中，<code>BEGIN { OFS = &quot;,&quot; }</code> 确保了 <code>awk</code> 在处理任何输入数据之前，将输出字段分隔符设置为逗号（<code>,</code>）。这样，<code>awk</code> 能够正确地将每一行的字段用逗号分隔开来。</p><p><strong>结合 <code>FS</code> 和 <code>OFS</code></strong></p><p>你可以同时设置输入字段分隔符 <code>FS</code> 和输出字段分隔符 <code>OFS</code>。例如，假设输入文件使用冒号（<code>:</code>）作为字段分隔符，而你希望输出使用逗号（<code>,</code>）作为字段分隔符：</p><p>假设有一个名为 <code>data.txt</code> 的文件，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name:age:salary</span></span>
<span class="line"><span>Alice:30:50000</span></span>
<span class="line"><span>Bob:25:60000</span></span>
<span class="line"><span>Charlie:35:70000</span></span>
<span class="line"><span>awk &#39;BEGIN { FS = &quot;:&quot;; OFS = &quot;,&quot; } { print $1, $2, $3 }&#39; data.txt</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name,age,salary</span></span>
<span class="line"><span>Alice,30,50000</span></span>
<span class="line"><span>Bob,25,60000</span></span>
<span class="line"><span>Charlie,35,70000</span></span></code></pre></div><p>在这个例子中，<code>BEGIN { FS = &quot;:&quot;; OFS = &quot;,&quot; }</code> 确保了 <code>awk</code> 在处理任何输入数据之前，将输入字段分隔符设置为冒号（<code>:</code>），并将输出字段分隔符设置为逗号（<code>,</code>）。</p><h2 id="_5-4-sed-命令" tabindex="-1">5.4 sed 命令 <a class="header-anchor" href="#_5-4-sed-命令" aria-label="Permalink to &quot;5.4 sed 命令&quot;">​</a></h2><ul><li>sed 是一个轻量级的编辑器，主要用来对数据进行选取、替换、和新增操作</li><li><strong>语法</strong><ul><li>sed [选项] &#39;[动作]&#39; 文件名</li></ul></li><li>所有的动作必须使用单引号包裹</li><li>默认情况下 sed 是<code>不会修改原文件的</code>，只会将结果输出到屏幕上</li></ul><p><strong>动作</strong></p><ul><li>带 n 的表示制定行数，如果不指定默认每行都会操作 ,n,m 一起写表示范围 eg;</li><li>如果想要插入多行可以使用<code>\\n</code>，进行换行 eg:<code>sed &#39;1a ee\\nrr&#39; 3.txt</code></li></ul><table tabindex="0"><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>[n,m]a</td><td>追加，在每一行或者指定行下面添加一行或多行</td></tr><tr><td>[n,m]c</td><td>行替换，用 c 后面的字符串替换原始行</td></tr><tr><td>[n,m]s</td><td>字符串替换，用一个字符串替换另一个字符串 语法<code>sed &#39;s/pattern/replacement/&#39; inputfile</code> pattern 指的是正则，斜杠 <code>/</code> 通常用于分隔模式和替换字符串 ，分隔符也可以使用其他的比如<code># :</code>等只要不与模式或动作冲突即可</td></tr><tr><td>[n,m]i</td><td>插入，在指定行掺入一行或多行</td></tr><tr><td>[n,m]d</td><td>删除指定行,不指定删除全部行</td></tr><tr><td>[n,m]p</td><td>打印，输出指定行</td></tr></tbody></table><p><strong>选项</strong></p><table tabindex="0"><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-n</td><td>一般 sed 命令会把所有的数据都输出到屏幕上，如果加入此选项只会把处理过的行输出到屏幕上</td></tr><tr><td>-e</td><td>允许对输入数据应用多条 sed 编辑命令</td></tr><tr><td>-i</td><td>用 sed 的修改直接修改源文件，而不是在屏幕上输出</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#1.txt内容如下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [n]a 追加</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  注意如果你的文件是一个空的 就是连行都没有 那么输出也是没有东西的下面的命令同理</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在第一行后面追加 ee</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1a ee&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ee</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在第一行和第二行追加ee</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;1,2a ee&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ee</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ee</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在第一行后面追加两行ee和rr</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1a ee\\nrr&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ee</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rr</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 不指定行数 默认每行后面都会追加</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1a ee&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ee</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ee</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ee</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [n]c 同[n]a一样</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将1替换成A</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加g 否则只替换找到的第一个</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># / 表示命令分割</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/1/A/g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [n]i</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在第一行插入 ee。那么原本的行都会下移一行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1i ee&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ee</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [n]d</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除第一行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1d&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#[n]p</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># sed 命令中的 p 命令用于打印指定的行。默认情况下，sed 会打印处理后的每一行，但通过使用 p 命令，你可以控制只打印特定的行。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2p&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 sed 会在处理每一行时默认打印该行，然后根据 2p 命令再打印一次第 2 行。这会导致第 2 行被打印两次。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -n</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1a ee&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 只会把处理过的结果显示</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ee</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -e</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将所有的1替换成A 然后在第3行后追加hhhh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/1/A/g&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3a hhhh&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hhhh</span></span></code></pre></div><h2 id="_5-5-排序命令-sort" tabindex="-1">5.5 排序命令 sort <a class="header-anchor" href="#_5-5-排序命令-sort" aria-label="Permalink to &quot;5.5 排序命令 sort&quot;">​</a></h2><ul><li><strong>语法</strong><ul><li>sort [选项] 文件名或内容</li></ul></li><li>字典顺序（lexicographical order）是指按照字母表顺序对字符串进行排序的方式。</li><li>默认情况下，<code>sort</code> 命令就是按照字典顺序对文件内容进行排序的。</li></ul><p><strong>选项</strong></p><table tabindex="0"><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>忽略大小写</td></tr><tr><td>-n</td><td>以数值型进行排序，</td></tr><tr><td>-r</td><td>反向排序，默认从小到大</td></tr><tr><td>-t</td><td>指定分隔符，默认分割符是制表符</td></tr><tr><td>-k n[,m]</td><td>指定每行的比较范围，如果不指定 m 会从 n 开始到，直到尾行</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># sort的比较规则如下</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果当前行的第一个字符和下一行的第一个字符相同，sort 命令会比较当前行和下一行的第二个字符 以此类推，直到找到不同的字段为止。如果所有字段都相同，那么行的顺序将保持不变（即稳定排序）。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># sort.txt内容如下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">30</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">40</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认排序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认是按照字典顺序排序的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sort.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">30</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">40</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -n</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 会找到每行出现的第一个数值然后和下一行出现的第一个数值进行比较</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.txt内容如下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apple</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apple</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apple</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apple</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -k n[,m]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果不指定m 会从n开始到，直到尾行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在默认情况下，sort 命令会从每行的第一个字符开始比较，如果第一个字符相同，则比较第二个字符，依此类推，直到找到不同的字符为止。如果所有字符都相同，则行的顺序保持不变（即稳定排序）。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 但是我们可以指定按照每行的第几个字段进行排序</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.txt 内容如下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 44</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从第二个字段开始到第二个字段结束的内容进行排序(比较规则看上面)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 所以就只会比较每行的第二个字段的内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果 -k 2,3 那么就会比较每行的第二个字段到第三个字段的所有内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 就是知道一个比较大范围</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -k</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2,2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 44</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -t 默认是按照制表符进行分割</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 上面提到-k可以指定范围，如果每行的内容使用的是别的符合进行分割就可以使用-t</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22:34</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">12:34</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定分隔符是: 比较范围是第二个字段开始到每行的末尾</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -k</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22:34</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">12:44</span></span></code></pre></div><h2 id="_5-6-wc" tabindex="-1">5.6 wc <a class="header-anchor" href="#_5-6-wc" aria-label="Permalink to &quot;5.6 wc&quot;">​</a></h2><p><code>wc</code>（word count）命令是 Unix 和 Unix-like 操作系统中的一个命令行工具，用于计算文件中的行数、字数和字节数。它可以处理一个或多个文件，并输出统计信息。</p><p><strong>语法</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [选项] [文件...]</span></span></code></pre></div><p><strong>常用选项</strong></p><ul><li><p><code>-l</code>：显示行数。</p></li><li><p><code>-w</code>：显示字数(单词数)。</p><ul><li>hello 表示一个单词</li></ul></li><li><p><code>-c</code>：显示字节数。</p><ul><li>统计在 ASCII 编码中所占的字节数</li></ul></li><li><p><code>-m</code>：显示字符数</p><ul><li>hello 就表示 5 个字符</li></ul></li><li><p><code>-L</code>：显示最长行的长度。</p></li></ul><p><strong>示例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设有一个文件 \`example.txt\`，内容如下：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">This</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">With</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> multiple</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lines</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  统计行数、字数和字节数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3表示行数 8表示字数(一共有10个单词) 45表示字节数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 45</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只统计行数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 其他选项同理</span></span></code></pre></div><p><strong>处理多个文件</strong></p><p>如果你有多个文件，可以一次性处理它们：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file1.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file2.txt</span></span></code></pre></div><p>输出将显示每个文件的统计信息以及总计：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  3  8 45 file1.txt</span></span>
<span class="line"><span>  4 10 50 file2.txt</span></span>
<span class="line"><span>  7 18 95 total</span></span></code></pre></div><h1 id="_6-流程控制" tabindex="-1">6.流程控制 <a class="header-anchor" href="#_6-流程控制" aria-label="Permalink to &quot;6.流程控制&quot;">​</a></h1><h2 id="_6-1-条件判断" tabindex="-1">6.1 条件判断 <a class="header-anchor" href="#_6-1-条件判断" aria-label="Permalink to &quot;6.1 条件判断&quot;">​</a></h2><h3 id="_6-1-1-test-命令和-命令" tabindex="-1">6.1.1 test 命令和[]命令 <a class="header-anchor" href="#_6-1-1-test-命令和-命令" aria-label="Permalink to &quot;6.1.1 test 命令和[]命令&quot;">​</a></h3><ul><li><p>test 命令用于<code>评估条件表达式</code>，并且<code>返回</code>一个<code>退出状态码</code>。退出状态码为<code>0表示条件为真</code>，<code>非0表示条件为假</code>。通常<code>用于条件判断</code>。</p></li><li><p>test<code>不会</code>直接输出结果，只会返回一个退出状态码</p><ul><li>所以不能 echo 直接输出</li><li>如果想要查看 test 输出看下面举例</li></ul></li><li><p><code>退出状态码</code></p><ul><li><code>0</code>表示命令执行成功</li><li><code>非0</code>表示执行失败，<code>不同的非0</code>可以表示不同的错误类型</li></ul></li><li><p><code>$?</code>: 是一个特殊的变量，用于获取上一个命令的退出状态码</p></li></ul><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表达式</span></span></code></pre></div><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断1.txt文件是否存在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># test -e 1.txt 返回0 所以走存在 因为退出状态码0表示真 不要和js搞混了</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.txt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;存在&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;不存在&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">存在</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看test的退出状态码</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.txt</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> $0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span></code></pre></div><h4 id="命令" tabindex="-1">[] 命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;[] 命令&quot;">​</a></h4><ul><li><code>[]</code>命令是 test 的简写，功能和 test 完全相同</li></ul><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[表达式]</span></span></code></pre></div><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断1.txt文件是否存在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意表达式和[]之间要有空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1.txt ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;存在&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;不存在&#39;</span></span></code></pre></div><h3 id="_6-1-2-按照文件类型进行判断" tabindex="-1">6.1.2 按照文件类型进行判断 <a class="header-anchor" href="#_6-1-2-按照文件类型进行判断" aria-label="Permalink to &quot;6.1.2 按照文件类型进行判断&quot;">​</a></h3><table tabindex="0"><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>文件是否存在并且是目录</td></tr><tr><td>-e</td><td>文件是否存在，不管是文件或者文件夹</td></tr><tr><td>-f</td><td>文件是否存在并且是普通文件</td></tr><tr><td>-b</td><td>文件是否存在并且是块设备文件</td></tr><tr><td>-c</td><td>文件是否存在并且是字符设备文件</td></tr><tr><td>-L</td><td>文件是否存在并且是链接文件</td></tr><tr><td>-p</td><td>文件是否存在并且是管道文件</td></tr><tr><td>-s</td><td>文件是否存在并且是非空文件</td></tr><tr><td>-S</td><td>文件是否存在并且是套接字文件</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断1.txt文件是否存在</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.txt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;存在&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;不存在&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">存在</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断a是否存在且是否是文件夹  a是一个没有后缀的文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 因为linux是不按照后缀区分的 后缀只是为了方便阅读 所以当不知道是文件夹还是文件的时候可以进行判断</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">no</span></span></code></pre></div><h3 id="_6-1-3-按照文件-夹-权限进行判断" tabindex="-1">6.1.3 按照文件(夹)权限进行判断 <a class="header-anchor" href="#_6-1-3-按照文件-夹-权限进行判断" aria-label="Permalink to &quot;6.1.3 按照文件(夹)权限进行判断&quot;">​</a></h3><table tabindex="0"><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>文件(夹)是否存在,并且是否拥有读的权限</td></tr><tr><td>-w</td><td>文件(夹)是否存在,并且是否拥有读的权限</td></tr><tr><td>-x</td><td>文件(夹)是否存在,并且是否拥有读的权限</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件夹a是否拥有执行的权限</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件1.txt是否拥有写的权限</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1.txt ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span></span></code></pre></div><h3 id="_6-1-4-两个文件-夹-间的比较" tabindex="-1">6.1.4 两个文件(夹)间的比较 <a class="header-anchor" href="#_6-1-4-两个文件-夹-间的比较" aria-label="Permalink to &quot;6.1.4 两个文件(夹)间的比较&quot;">​</a></h3><table tabindex="0"><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>文件 1 -nt 文件 2</td><td>(new than) 判断文件 1 的修改时间是否比文件 2 的新</td></tr><tr><td>文件 1 -ot 文件 2</td><td>(old than) 判断文件 1 的修改时间是否比文件 2 的旧</td></tr><tr><td>文件 1 -ef 文件 2</td><td>(equal file) 判断文件 1 和文件 2 是否是同一个文件，可用于判断硬连接或符号链接，比如 1.txt 是 2.txt 的硬连接</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 已有文件(夹)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-rw-r--r--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 6月</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 17:55</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-rw-r--r--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 6月</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 17:58</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drwxr-xr-x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 6月</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 17:56</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意：文件和文件夹之间也能对比</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件1.txt的修改时间是否比文件2.txt新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ 1.txt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-nt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 2.txt ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件1.txt的修改时间是否比文件夹a新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ 1.txt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-nt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span></span></code></pre></div><h3 id="_6-1-5-两个整数之间的比较" tabindex="-1">6.1.5 两个整数之间的比较 <a class="header-anchor" href="#_6-1-5-两个整数之间的比较" aria-label="Permalink to &quot;6.1.5 两个整数之间的比较&quot;">​</a></h3><table tabindex="0"><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>整数 1 -eq 整数 2</td><td>(equal) 判断整数 1 是否和整数 2 相等</td></tr><tr><td>整数 1 -ne 整数 2</td><td>(not equal) 判断整数 1 是否和整数 2 不相等</td></tr><tr><td>整数 1 -gt 整数 2</td><td>(greater than)判断整数 1 是否大于整数 2</td></tr><tr><td>整数 1 -lt 整数 2</td><td>(less than)判断整数 1 是否小于整数 2</td></tr><tr><td>整数 1 -ge 整数 2</td><td>(greater than or equal)判断整数 1 是否大于等于整数 2</td></tr><tr><td>整数 1 -le 整数 2</td><td>(less than or equal)判断整数 1 是否小于等于整数 2</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断整数3是否小于整数4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -lt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span></span></code></pre></div><h3 id="_6-1-6-字符串的判断" tabindex="-1">6.1.6 字符串的判断 <a class="header-anchor" href="#_6-1-6-字符串的判断" aria-label="Permalink to &quot;6.1.6 字符串的判断&quot;">​</a></h3><table tabindex="0"><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-z 字符串</td><td>判断字符串是否为空</td></tr><tr><td>-n 字符串</td><td>判断字符串是否为非空</td></tr><tr><td>字符串 1 == 字符串 2</td><td>判断字符串 1 是否和字符串 2 相等</td></tr><tr><td>字符串 1 != 字符串 2</td><td>判断字符串 1 是否和字符串 2 不相等</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">哈哈</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">哈哈</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断变量a是否是一个空字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $a ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">no</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断变量a和变量b是否相等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ $a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $b ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span></span></code></pre></div><h3 id="_6-1-7-多重判断条件" tabindex="-1">6.1.7 多重判断条件 <a class="header-anchor" href="#_6-1-7-多重判断条件" aria-label="Permalink to &quot;6.1.7 多重判断条件&quot;">​</a></h3><ul><li>可以多个条件 <ul><li>判断 1 -a 判断 2 -a 判断 3 等更多的判断</li></ul></li></ul><table tabindex="0"><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>判断 1 -a 判断 2</td><td>(and) 逻辑与</td></tr><tr><td>判断 1 -o 判断 2</td><td>(or) 逻辑或</td></tr><tr><td>!判断</td><td>逻辑非</td></tr></tbody></table><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 条件1和条件2都成立的话 输出yes 否则输出no</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -gt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -gt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2 -gt 1的结果取反</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -gt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">no</span></span></code></pre></div><h2 id="_6-2-单分支-if-语句" tabindex="-1">6.2 单分支 if 语句 <a class="header-anchor" href="#_6-2-单分支-if-语句" aria-label="Permalink to &quot;6.2 单分支 if 语句&quot;">​</a></h2><ul><li><code>if</code>语句使用<code>fi</code>结尾</li><li>[ 条件判断 ] 就是<code>test命令</code>进行判断</li><li>then 后面跟符合条件之后执行的程序</li></ul><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用;隔开</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ 条件判断 ];</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 代码体 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用换行隔开就不需要写;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ 条件判断 ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	代码体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><p><strong>举例</strong></p><p>a.sh</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># !/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用;分隔写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -gt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ];</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bigger&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用换行写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -lt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> smaller</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><p><strong>判断当前用户是否是 root 用户</strong></p><p>isRoot.sh</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># !/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 声明变量user值是系统变量whoami $() 用于调用系统变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">whoami</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ $user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;是&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><h2 id="_6-3-双分支-if-语句" tabindex="-1">6.3 双分支 if 语句 <a class="header-anchor" href="#_6-3-双分支-if-语句" aria-label="Permalink to &quot;6.3 双分支 if 语句&quot;">​</a></h2><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ 条件判断 ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	代码体1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	代码体2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><p><strong>举例</strong></p><p>isDir.sh</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># !/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断输入的是否是一个文件夹</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 请输入一个路径</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dir</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $dir ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $dir是一个路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $dir不是一个路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><h2 id="_6-4-多分支语句" tabindex="-1">6.4 多分支语句 <a class="header-anchor" href="#_6-4-多分支语句" aria-label="Permalink to &quot;6.4 多分支语句&quot;">​</a></h2><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ 条件判断 ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	代码体1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ 条件判断 ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	代码体2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	代码体3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><p><strong>举例</strong></p><p>score.sh</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># !/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 根据输入的分数给出输出</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;请输入一个分数&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> score</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ $score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-gt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 优秀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ $score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-gt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 良好</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 差</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><h2 id="_6-5-case-语句" tabindex="-1">6.5 case 语句 <a class="header-anchor" href="#_6-5-case-语句" aria-label="Permalink to &quot;6.5 case 语句&quot;">​</a></h2><ul><li>case 和 if 都是多分支判断语句，if 能判断多个条件，case 只能判断一个条件</li></ul><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># *) 表示剩下的值和js的case的default一样</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 要以esac 就是case反过来</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $choice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">	值1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		代码块1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">	值2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		代码块2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	*)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		代码块3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">esac</span></span></code></pre></div><p><strong>举例</strong></p><p>case.shell</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># !/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;输入你的选择(yes/no/other)&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> choice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $choice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">	yes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">	no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	*)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> other</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">esac</span></span></code></pre></div><h2 id="_6-5-for-循环" tabindex="-1">6.5 for 循环 <a class="header-anchor" href="#_6-5-for-循环" aria-label="Permalink to &quot;6.5 for 循环&quot;">​</a></h2><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 变量 in 值1 值2 ... 值n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">代码块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 另一种</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (( 初始化; 条件; 迭代 ))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    代码块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 还可以 效果和上面一样</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h2 id="_6-6-while-循环" tabindex="-1">6.6 while 循环 <a class="header-anchor" href="#_6-6-while-循环" aria-label="Permalink to &quot;6.6 while 循环&quot;">​</a></h2><ul><li>while 循环是不定循环，也称为条件循环，只有判断条件成立，就会一直继续</li></ul><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ 条件判断 ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	代码块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># !/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 结果是 打印1-9</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ $i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-lt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(($i+1))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h2 id="_6-7-until-循环" tabindex="-1">6.7 until 循环 <a class="header-anchor" href="#_6-7-until-循环" aria-label="Permalink to &quot;6.7 until 循环&quot;">​</a></h2><ul><li>默认会执行 do 的代码块，直到条件成立停止</li></ul><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">until</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ 条件判断 ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	代码块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># !/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 结果是 打印1-9</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 直到i&gt;10才停止执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">until</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ $i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-gt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(($i+1))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h1 id="_7-函数" tabindex="-1">7 函数 <a class="header-anchor" href="#_7-函数" aria-label="Permalink to &quot;7 函数&quot;">​</a></h1><ul><li><code>Linux shell</code> 可以用户定义函数，然后在 shell 脚本中可以随便调用</li><li>可以使用<code>function</code>关键字定义，也可以<code>不使用</code>function 定义</li><li>调用函数不需要加<code>()</code></li></ul><h2 id="_7-1-简单函数" tabindex="-1">7.1 简单函数 <a class="header-anchor" href="#_7-1-简单函数" aria-label="Permalink to &quot;7.1 简单函数&quot;">​</a></h2><p><strong>语法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># []内表示可有可无</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[function] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">funcName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	todo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[return xxx]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>举例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># !/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用函数不需要加括号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方式二 不使用function关键字定义</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 函数传参</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># $1 $2 表示第一个参数和第二个参数 具体的看前面的笔记</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用函数的时候 参数直接写后面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><h2 id="_7-2-return-返回值" tabindex="-1">7.2 return 返回值 <a class="header-anchor" href="#_7-2-return-返回值" aria-label="Permalink to &quot;7.2 return 返回值&quot;">​</a></h2><ul><li>参数返回，可以显示加 return</li><li>如果不加 return，将以最后一条命令的运行结果作为返回值</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输入 5</span></span></code></pre></div><h2 id="_7-3-参数说明" tabindex="-1">7.3 参数说明 <a class="header-anchor" href="#_7-3-参数说明" aria-label="Permalink to &quot;7.3 参数说明&quot;">​</a></h2><table tabindex="0"><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数</td></tr><tr><td>$$</td><td>脚本运行的当前的进程 ID 号</td></tr><tr><td>$?</td><td>最后一次执行的命令的返回状态，0 表示正确执行，非 0 表示不正确执行</td></tr></tbody></table>`,470)]))}const g=i(t,[["render",p]]);export{o as __pageData,g as default};
